Terminals unused in grammar

    TEST
    EXPR
    LOCAL
    DECLARE
    THEN
    ELIF
    ELSE
    FI
    FOR
    WHILE
    CASE
    ESAC
    IN
    DO
    DONE
    READ
    ECHO
    RETURN
    EXIT
    COMMENT
    UMOINS


State 99 conflicts: 1 shift/reduce
State 131 conflicts: 1 shift/reduce
State 132 conflicts: 1 shift/reduce


Grammar

    0 $accept: programme $end

    1 programme: liste_instructions

    2 liste_instructions: liste_instructions ';' instruction
    3                   | instruction

    4 instruction: ID '=' concatenation
    5            | ID '[' operande_entier ']' '=' concatenation
    6            | "declare" ID '[' ENTIER ']'
    7            | IF test_bloc "then" liste_instructions else_part "fi"
    8            | "for" ID "do" liste_instructions "done"
    9            | "for" ID "in" liste_operandes "do" liste_instructions "done"
   10            | "while" test_bloc "do" liste_instructions "done"
   11            | "until" test_bloc "do" liste_instructions "done"
   12            | "case" operande "in" liste_cas "esac"
   13            | "echo" liste_operandes
   14            | "read" ID
   15            | "read" ID '[' operande_entier ']'
   16            | declaration_de_fonction
   17            | appel_de_fonction
   18            | "return"
   19            | "return" operande_entier
   20            | "exit"
   21            | "exit" operande_entier

   22 else_part: "elif" test_bloc "then" liste_instructions else_part
   23          | "else" liste_instructions
   24          | ε

   25 liste_cas: liste_cas filtre ')' liste_instructions ";;"
   26          | filtre ')' liste_instructions ";;"

   27 filtre: MOT
   28       | CHAINE
   29       | filtre '|' MOT
   30       | filtre '|' CHAINE
   31       | '*'

   32 $@1: ε

   33 liste_operandes: liste_operandes operande $@1 operande_entier
   34                | operande
   35                | "${" ID "[*]}"

   36 concatenation: concatenation operande
   37              | operande

   38 test_bloc: "test" test_expr

   39 test_expr: test_expr "-o" test_expr2
   40          | test_expr2

   41 test_expr2: test_expr2 "-a" test_expr3

   42 $@2: ε

   43 test_expr2: test_expr3 $@2 operande_entier

   44 test_expr3: '(' test_expr ')'
   45           | '!' '(' test_expr ')'
   46           | test_instruction
   47           | '!' test_instruction

   48 test_instruction: concatenation '=' concatenation
   49                 | concatenation "!=" concatenation
   50                 | operateur1 concatenation
   51                 | operande operateur2 operande

   52 operande: '$' '{' ID '}'

   53 $@3: ε

   54 operande: '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
   55         | MOT
   56         | '$' ENTIER
   57         | '$' '*'
   58         | '$' '?'
   59         | CHAINE
   60         | '$' '(' "expr" somme_entiere ')'
   61         | '$' '(' appel_de_fonction ')'

   62 operateur1: "-n"
   63           | "-z"

   64 operateur2: "-eq"
   65           | "-ne"
   66           | "-gt"
   67           | "-ge"
   68           | "-lt"
   69           | "-le"

   70 somme_entiere: somme_entiere plus_ou_moins produit_entier
   71              | produit_entier

   72 produit_entier: produit_entier fois_div_mod operande_entier
   73               | operande_entier

   74 operande_entier: '$' '{' ID '}'
   75                | '$' '{' ID '[' operande_entier ']' '}'
   76                | '$' ENTIER
   77                | plus_ou_moins '$' '{' ID '}'
   78                | plus_ou_moins '$' '{' ID '[' operande_entier ']' '}'
   79                | plus_ou_moins '$' ENTIER
   80                | ENTIER
   81                | plus_ou_moins ENTIER
   82                | '(' somme_entiere ')'

   83 plus_ou_moins: '+'
   84              | '-'

   85 fois_div_mod: '*'
   86             | '/'
   87             | '%'

   88 declaration_de_fonction: ID '(' ')' '{' decl_loc liste_instructions '}'

   89 decl_loc: decl_loc "local" ID '=' concatenation ';'
   90         | ε

   91 appel_de_fonction: ID liste_operandes
   92                  | ID


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 45 47
    '$' (36) 52 54 56 57 58 60 61 74 75 76 77 78 79
    '%' (37) 87
    '(' (40) 44 45 60 61 82 88
    ')' (41) 25 26 44 45 60 61 82 88
    '*' (42) 31 57 85
    '+' (43) 83
    '-' (45) 84
    '/' (47) 86
    ';' (59) 2 89
    '=' (61) 4 5 48 89
    '?' (63) 58
    '[' (91) 5 6 15 54 75 78
    ']' (93) 5 6 15 54 75 78
    '{' (123) 52 54 74 75 77 78 88
    '|' (124) 29 30
    '}' (125) 52 54 74 75 77 78 88
    error (256)
    TEST (258)
    EXPR (259)
    LOCAL (260)
    DECLARE (261)
    IF (262) 7
    THEN (263)
    ELIF (264)
    ELSE (265)
    FI (266)
    FOR (267)
    WHILE (268)
    CASE (269)
    ESAC (270)
    IN (271)
    DO (272)
    DONE (273)
    READ (274)
    ECHO (275)
    RETURN (276)
    EXIT (277)
    COMMENT (278)
    ID (279) 4 5 6 8 9 14 15 35 52 54 74 75 77 78 88 89 91 92
    MOT (280) 27 29 55
    CHAINE (281) 28 30 59
    ENTIER (282) 6 56 76 79 80 81
    UMOINS (283)
    "declare" (284) 6
    "then" (285) 7 22
    "fi" (286) 7
    "for" (287) 8 9
    "do" (288) 8 9 10 11
    "done" (289) 8 9 10 11
    "in" (290) 9 12
    "while" (291) 10
    "until" (292) 11
    "case" (293) 12
    "esac" (294) 12
    "echo" (295) 13
    "read" (296) 14 15
    "return" (297) 18 19
    "exit" (298) 20 21
    "elif" (299) 22
    "else" (300) 23
    ";;" (301) 25 26
    "${" (302) 35
    "[*]}" (303) 35
    "test" (304) 38
    "-o" (305) 39
    "-a" (306) 41
    "!=" (307) 49
    "expr" (308) 60
    "-n" (309) 62
    "-z" (310) 63
    "-eq" (311) 64
    "-ne" (312) 65
    "-gt" (313) 66
    "-ge" (314) 67
    "-lt" (315) 68
    "-le" (316) 69
    "local" (317) 89


Nonterminals, with rules where they appear

    $accept (80)
        on left: 0
    programme (81)
        on left: 1
        on right: 0
    liste_instructions (82)
        on left: 2 3
        on right: 1 2 7 8 9 10 11 22 23 25 26 88
    instruction (83)
        on left: 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21
        on right: 2 3
    else_part (84)
        on left: 22 23 24
        on right: 7 22
    liste_cas (85)
        on left: 25 26
        on right: 12 25
    filtre (86)
        on left: 27 28 29 30 31
        on right: 25 26 29 30
    liste_operandes (87)
        on left: 33 34 35
        on right: 9 13 33 91
    $@1 (88)
        on left: 32
        on right: 33
    concatenation (89)
        on left: 36 37
        on right: 4 5 36 48 49 50 89
    test_bloc (90)
        on left: 38
        on right: 7 10 11 22
    test_expr (91)
        on left: 39 40
        on right: 38 39 44 45
    test_expr2 (92)
        on left: 41 43
        on right: 39 40 41
    $@2 (93)
        on left: 42
        on right: 43
    test_expr3 (94)
        on left: 44 45 46 47
        on right: 41 43
    test_instruction (95)
        on left: 48 49 50 51
        on right: 46 47
    operande (96)
        on left: 52 54 55 56 57 58 59 60 61
        on right: 12 33 34 36 37 51
    $@3 (97)
        on left: 53
        on right: 54
    operateur1 (98)
        on left: 62 63
        on right: 50
    operateur2 (99)
        on left: 64 65 66 67 68 69
        on right: 51
    somme_entiere (100)
        on left: 70 71
        on right: 60 70 82
    produit_entier (101)
        on left: 72 73
        on right: 70 71 72
    operande_entier (102)
        on left: 74 75 76 77 78 79 80 81 82
        on right: 5 15 19 21 33 43 54 72 73 75 78
    plus_ou_moins (103)
        on left: 83 84
        on right: 70 77 78 79 81
    fois_div_mod (104)
        on left: 85 86 87
        on right: 72
    declaration_de_fonction (105)
        on left: 88
        on right: 16
    decl_loc (106)
        on left: 89 90
        on right: 88 89
    appel_de_fonction (107)
        on left: 91 92
        on right: 17 61


State 0

    0 $accept: • programme $end
    1 programme: • liste_instructions
    2 liste_instructions: • liste_instructions ';' instruction
    3                   | • instruction
    4 instruction: • ID '=' concatenation
    5            | • ID '[' operande_entier ']' '=' concatenation
    6            | • "declare" ID '[' ENTIER ']'
    7            | • IF test_bloc "then" liste_instructions else_part "fi"
    8            | • "for" ID "do" liste_instructions "done"
    9            | • "for" ID "in" liste_operandes "do" liste_instructions "done"
   10            | • "while" test_bloc "do" liste_instructions "done"
   11            | • "until" test_bloc "do" liste_instructions "done"
   12            | • "case" operande "in" liste_cas "esac"
   13            | • "echo" liste_operandes
   14            | • "read" ID
   15            | • "read" ID '[' operande_entier ']'
   16            | • declaration_de_fonction
   17            | • appel_de_fonction
   18            | • "return"
   19            | • "return" operande_entier
   20            | • "exit"
   21            | • "exit" operande_entier
   88 declaration_de_fonction: • ID '(' ')' '{' decl_loc liste_instructions '}'
   91 appel_de_fonction: • ID liste_operandes
   92                  | • ID

    IF         shift, and go to state 1
    ID         shift, and go to state 2
    "declare"  shift, and go to state 3
    "for"      shift, and go to state 4
    "while"    shift, and go to state 5
    "until"    shift, and go to state 6
    "case"     shift, and go to state 7
    "echo"     shift, and go to state 8
    "read"     shift, and go to state 9
    "return"   shift, and go to state 10
    "exit"     shift, and go to state 11

    programme                go to state 12
    liste_instructions       go to state 13
    instruction              go to state 14
    declaration_de_fonction  go to state 15
    appel_de_fonction        go to state 16


State 1

    7 instruction: IF • test_bloc "then" liste_instructions else_part "fi"
   38 test_bloc: • "test" test_expr

    "test"  shift, and go to state 17

    test_bloc  go to state 18


State 2

    4 instruction: ID • '=' concatenation
    5            | ID • '[' operande_entier ']' '=' concatenation
   33 liste_operandes: • liste_operandes operande $@1 operande_entier
   34                | • operande
   35                | • "${" ID "[*]}"
   52 operande: • '$' '{' ID '}'
   54         | • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
   55         | • MOT
   56         | • '$' ENTIER
   57         | • '$' '*'
   58         | • '$' '?'
   59         | • CHAINE
   60         | • '$' '(' "expr" somme_entiere ')'
   61         | • '$' '(' appel_de_fonction ')'
   88 declaration_de_fonction: ID • '(' ')' '{' decl_loc liste_instructions '}'
   91 appel_de_fonction: ID • liste_operandes
   92                  | ID •  [$end, ';', "fi", "done", "elif", "else", ";;", '}']

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '='     shift, and go to state 21
    '['     shift, and go to state 22
    "${"    shift, and go to state 23
    '('     shift, and go to state 24
    '$'     shift, and go to state 25

    $default  reduce using rule 92 (appel_de_fonction)

    liste_operandes  go to state 26
    operande         go to state 27


State 3

    6 instruction: "declare" • ID '[' ENTIER ']'

    ID  shift, and go to state 28


State 4

    8 instruction: "for" • ID "do" liste_instructions "done"
    9            | "for" • ID "in" liste_operandes "do" liste_instructions "done"

    ID  shift, and go to state 29


State 5

   10 instruction: "while" • test_bloc "do" liste_instructions "done"
   38 test_bloc: • "test" test_expr

    "test"  shift, and go to state 17

    test_bloc  go to state 30


State 6

   11 instruction: "until" • test_bloc "do" liste_instructions "done"
   38 test_bloc: • "test" test_expr

    "test"  shift, and go to state 17

    test_bloc  go to state 31


State 7

   12 instruction: "case" • operande "in" liste_cas "esac"
   52 operande: • '$' '{' ID '}'
   54         | • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
   55         | • MOT
   56         | • '$' ENTIER
   57         | • '$' '*'
   58         | • '$' '?'
   59         | • CHAINE
   60         | • '$' '(' "expr" somme_entiere ')'
   61         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 25

    operande  go to state 32


State 8

   13 instruction: "echo" • liste_operandes
   33 liste_operandes: • liste_operandes operande $@1 operande_entier
   34                | • operande
   35                | • "${" ID "[*]}"
   52 operande: • '$' '{' ID '}'
   54         | • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
   55         | • MOT
   56         | • '$' ENTIER
   57         | • '$' '*'
   58         | • '$' '?'
   59         | • CHAINE
   60         | • '$' '(' "expr" somme_entiere ')'
   61         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    "${"    shift, and go to state 23
    '$'     shift, and go to state 25

    liste_operandes  go to state 33
    operande         go to state 27


State 9

   14 instruction: "read" • ID
   15            | "read" • ID '[' operande_entier ']'

    ID  shift, and go to state 34


State 10

   18 instruction: "return" •  [$end, ';', "fi", "done", "elif", "else", ";;", '}']
   19            | "return" • operande_entier
   74 operande_entier: • '$' '{' ID '}'
   75                | • '$' '{' ID '[' operande_entier ']' '}'
   76                | • '$' ENTIER
   77                | • plus_ou_moins '$' '{' ID '}'
   78                | • plus_ou_moins '$' '{' ID '[' operande_entier ']' '}'
   79                | • plus_ou_moins '$' ENTIER
   80                | • ENTIER
   81                | • plus_ou_moins ENTIER
   82                | • '(' somme_entiere ')'
   83 plus_ou_moins: • '+'
   84              | • '-'

    ENTIER  shift, and go to state 35
    '+'     shift, and go to state 36
    '-'     shift, and go to state 37
    '('     shift, and go to state 38
    '$'     shift, and go to state 39

    $default  reduce using rule 18 (instruction)

    operande_entier  go to state 40
    plus_ou_moins    go to state 41


State 11

   20 instruction: "exit" •  [$end, ';', "fi", "done", "elif", "else", ";;", '}']
   21            | "exit" • operande_entier
   74 operande_entier: • '$' '{' ID '}'
   75                | • '$' '{' ID '[' operande_entier ']' '}'
   76                | • '$' ENTIER
   77                | • plus_ou_moins '$' '{' ID '}'
   78                | • plus_ou_moins '$' '{' ID '[' operande_entier ']' '}'
   79                | • plus_ou_moins '$' ENTIER
   80                | • ENTIER
   81                | • plus_ou_moins ENTIER
   82                | • '(' somme_entiere ')'
   83 plus_ou_moins: • '+'
   84              | • '-'

    ENTIER  shift, and go to state 35
    '+'     shift, and go to state 36
    '-'     shift, and go to state 37
    '('     shift, and go to state 38
    '$'     shift, and go to state 39

    $default  reduce using rule 20 (instruction)

    operande_entier  go to state 42
    plus_ou_moins    go to state 41


State 12

    0 $accept: programme • $end

    $end  shift, and go to state 43


State 13

    1 programme: liste_instructions •  [$end]
    2 liste_instructions: liste_instructions • ';' instruction

    ';'  shift, and go to state 44

    $default  reduce using rule 1 (programme)


State 14

    3 liste_instructions: instruction •

    $default  reduce using rule 3 (liste_instructions)


State 15

   16 instruction: declaration_de_fonction •

    $default  reduce using rule 16 (instruction)


State 16

   17 instruction: appel_de_fonction •

    $default  reduce using rule 17 (instruction)


State 17

   36 concatenation: • concatenation operande
   37              | • operande
   38 test_bloc: "test" • test_expr
   39 test_expr: • test_expr "-o" test_expr2
   40          | • test_expr2
   41 test_expr2: • test_expr2 "-a" test_expr3
   43           | • test_expr3 $@2 operande_entier
   44 test_expr3: • '(' test_expr ')'
   45           | • '!' '(' test_expr ')'
   46           | • test_instruction
   47           | • '!' test_instruction
   48 test_instruction: • concatenation '=' concatenation
   49                 | • concatenation "!=" concatenation
   50                 | • operateur1 concatenation
   51                 | • operande operateur2 operande
   52 operande: • '$' '{' ID '}'
   54         | • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
   55         | • MOT
   56         | • '$' ENTIER
   57         | • '$' '*'
   58         | • '$' '?'
   59         | • CHAINE
   60         | • '$' '(' "expr" somme_entiere ')'
   61         | • '$' '(' appel_de_fonction ')'
   62 operateur1: • "-n"
   63           | • "-z"

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '('     shift, and go to state 45
    '!'     shift, and go to state 46
    '$'     shift, and go to state 25
    "-n"    shift, and go to state 47
    "-z"    shift, and go to state 48

    concatenation     go to state 49
    test_expr         go to state 50
    test_expr2        go to state 51
    test_expr3        go to state 52
    test_instruction  go to state 53
    operande          go to state 54
    operateur1        go to state 55


State 18

    7 instruction: IF test_bloc • "then" liste_instructions else_part "fi"

    "then"  shift, and go to state 56


State 19

   55 operande: MOT •

    $default  reduce using rule 55 (operande)


State 20

   59 operande: CHAINE •

    $default  reduce using rule 59 (operande)


State 21

    4 instruction: ID '=' • concatenation
   36 concatenation: • concatenation operande
   37              | • operande
   52 operande: • '$' '{' ID '}'
   54         | • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
   55         | • MOT
   56         | • '$' ENTIER
   57         | • '$' '*'
   58         | • '$' '?'
   59         | • CHAINE
   60         | • '$' '(' "expr" somme_entiere ')'
   61         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 25

    concatenation  go to state 57
    operande       go to state 58


State 22

    5 instruction: ID '[' • operande_entier ']' '=' concatenation
   74 operande_entier: • '$' '{' ID '}'
   75                | • '$' '{' ID '[' operande_entier ']' '}'
   76                | • '$' ENTIER
   77                | • plus_ou_moins '$' '{' ID '}'
   78                | • plus_ou_moins '$' '{' ID '[' operande_entier ']' '}'
   79                | • plus_ou_moins '$' ENTIER
   80                | • ENTIER
   81                | • plus_ou_moins ENTIER
   82                | • '(' somme_entiere ')'
   83 plus_ou_moins: • '+'
   84              | • '-'

    ENTIER  shift, and go to state 35
    '+'     shift, and go to state 36
    '-'     shift, and go to state 37
    '('     shift, and go to state 38
    '$'     shift, and go to state 39

    operande_entier  go to state 59
    plus_ou_moins    go to state 41


State 23

   35 liste_operandes: "${" • ID "[*]}"

    ID  shift, and go to state 60


State 24

   88 declaration_de_fonction: ID '(' • ')' '{' decl_loc liste_instructions '}'

    ')'  shift, and go to state 61


State 25

   52 operande: '$' • '{' ID '}'
   54         | '$' • '{' ID '[' operande_entier ']' '}' $@3 operande_entier
   56         | '$' • ENTIER
   57         | '$' • '*'
   58         | '$' • '?'
   60         | '$' • '(' "expr" somme_entiere ')'
   61         | '$' • '(' appel_de_fonction ')'

    ENTIER  shift, and go to state 62
    '*'     shift, and go to state 63
    '('     shift, and go to state 64
    '{'     shift, and go to state 65
    '?'     shift, and go to state 66


State 26

   33 liste_operandes: liste_operandes • operande $@1 operande_entier
   52 operande: • '$' '{' ID '}'
   54         | • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
   55         | • MOT
   56         | • '$' ENTIER
   57         | • '$' '*'
   58         | • '$' '?'
   59         | • CHAINE
   60         | • '$' '(' "expr" somme_entiere ')'
   61         | • '$' '(' appel_de_fonction ')'
   91 appel_de_fonction: ID liste_operandes •  [$end, ';', "fi", "done", "elif", "else", ')', ";;", '}']

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 25

    $default  reduce using rule 91 (appel_de_fonction)

    operande  go to state 67


State 27

   34 liste_operandes: operande •

    $default  reduce using rule 34 (liste_operandes)


State 28

    6 instruction: "declare" ID • '[' ENTIER ']'

    '['  shift, and go to state 68


State 29

    8 instruction: "for" ID • "do" liste_instructions "done"
    9            | "for" ID • "in" liste_operandes "do" liste_instructions "done"

    "do"  shift, and go to state 69
    "in"  shift, and go to state 70


State 30

   10 instruction: "while" test_bloc • "do" liste_instructions "done"

    "do"  shift, and go to state 71


State 31

   11 instruction: "until" test_bloc • "do" liste_instructions "done"

    "do"  shift, and go to state 72


State 32

   12 instruction: "case" operande • "in" liste_cas "esac"

    "in"  shift, and go to state 73


State 33

   13 instruction: "echo" liste_operandes •  [$end, ';', "fi", "done", "elif", "else", ";;", '}']
   33 liste_operandes: liste_operandes • operande $@1 operande_entier
   52 operande: • '$' '{' ID '}'
   54         | • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
   55         | • MOT
   56         | • '$' ENTIER
   57         | • '$' '*'
   58         | • '$' '?'
   59         | • CHAINE
   60         | • '$' '(' "expr" somme_entiere ')'
   61         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 25

    $default  reduce using rule 13 (instruction)

    operande  go to state 67


State 34

   14 instruction: "read" ID •  [$end, ';', "fi", "done", "elif", "else", ";;", '}']
   15            | "read" ID • '[' operande_entier ']'

    '['  shift, and go to state 74

    $default  reduce using rule 14 (instruction)


State 35

   80 operande_entier: ENTIER •

    $default  reduce using rule 80 (operande_entier)


State 36

   83 plus_ou_moins: '+' •

    $default  reduce using rule 83 (plus_ou_moins)


State 37

   84 plus_ou_moins: '-' •

    $default  reduce using rule 84 (plus_ou_moins)


State 38

   70 somme_entiere: • somme_entiere plus_ou_moins produit_entier
   71              | • produit_entier
   72 produit_entier: • produit_entier fois_div_mod operande_entier
   73               | • operande_entier
   74 operande_entier: • '$' '{' ID '}'
   75                | • '$' '{' ID '[' operande_entier ']' '}'
   76                | • '$' ENTIER
   77                | • plus_ou_moins '$' '{' ID '}'
   78                | • plus_ou_moins '$' '{' ID '[' operande_entier ']' '}'
   79                | • plus_ou_moins '$' ENTIER
   80                | • ENTIER
   81                | • plus_ou_moins ENTIER
   82                | • '(' somme_entiere ')'
   82                | '(' • somme_entiere ')'
   83 plus_ou_moins: • '+'
   84              | • '-'

    ENTIER  shift, and go to state 35
    '+'     shift, and go to state 36
    '-'     shift, and go to state 37
    '('     shift, and go to state 38
    '$'     shift, and go to state 39

    somme_entiere    go to state 75
    produit_entier   go to state 76
    operande_entier  go to state 77
    plus_ou_moins    go to state 41


State 39

   74 operande_entier: '$' • '{' ID '}'
   75                | '$' • '{' ID '[' operande_entier ']' '}'
   76                | '$' • ENTIER

    ENTIER  shift, and go to state 78
    '{'     shift, and go to state 79


State 40

   19 instruction: "return" operande_entier •

    $default  reduce using rule 19 (instruction)


State 41

   77 operande_entier: plus_ou_moins • '$' '{' ID '}'
   78                | plus_ou_moins • '$' '{' ID '[' operande_entier ']' '}'
   79                | plus_ou_moins • '$' ENTIER
   81                | plus_ou_moins • ENTIER

    ENTIER  shift, and go to state 80
    '$'     shift, and go to state 81


State 42

   21 instruction: "exit" operande_entier •

    $default  reduce using rule 21 (instruction)


State 43

    0 $accept: programme $end •

    $default  accept


State 44

    2 liste_instructions: liste_instructions ';' • instruction
    4 instruction: • ID '=' concatenation
    5            | • ID '[' operande_entier ']' '=' concatenation
    6            | • "declare" ID '[' ENTIER ']'
    7            | • IF test_bloc "then" liste_instructions else_part "fi"
    8            | • "for" ID "do" liste_instructions "done"
    9            | • "for" ID "in" liste_operandes "do" liste_instructions "done"
   10            | • "while" test_bloc "do" liste_instructions "done"
   11            | • "until" test_bloc "do" liste_instructions "done"
   12            | • "case" operande "in" liste_cas "esac"
   13            | • "echo" liste_operandes
   14            | • "read" ID
   15            | • "read" ID '[' operande_entier ']'
   16            | • declaration_de_fonction
   17            | • appel_de_fonction
   18            | • "return"
   19            | • "return" operande_entier
   20            | • "exit"
   21            | • "exit" operande_entier
   88 declaration_de_fonction: • ID '(' ')' '{' decl_loc liste_instructions '}'
   91 appel_de_fonction: • ID liste_operandes
   92                  | • ID

    IF         shift, and go to state 1
    ID         shift, and go to state 2
    "declare"  shift, and go to state 3
    "for"      shift, and go to state 4
    "while"    shift, and go to state 5
    "until"    shift, and go to state 6
    "case"     shift, and go to state 7
    "echo"     shift, and go to state 8
    "read"     shift, and go to state 9
    "return"   shift, and go to state 10
    "exit"     shift, and go to state 11

    instruction              go to state 82
    declaration_de_fonction  go to state 15
    appel_de_fonction        go to state 16


State 45

   36 concatenation: • concatenation operande
   37              | • operande
   39 test_expr: • test_expr "-o" test_expr2
   40          | • test_expr2
   41 test_expr2: • test_expr2 "-a" test_expr3
   43           | • test_expr3 $@2 operande_entier
   44 test_expr3: • '(' test_expr ')'
   44           | '(' • test_expr ')'
   45           | • '!' '(' test_expr ')'
   46           | • test_instruction
   47           | • '!' test_instruction
   48 test_instruction: • concatenation '=' concatenation
   49                 | • concatenation "!=" concatenation
   50                 | • operateur1 concatenation
   51                 | • operande operateur2 operande
   52 operande: • '$' '{' ID '}'
   54         | • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
   55         | • MOT
   56         | • '$' ENTIER
   57         | • '$' '*'
   58         | • '$' '?'
   59         | • CHAINE
   60         | • '$' '(' "expr" somme_entiere ')'
   61         | • '$' '(' appel_de_fonction ')'
   62 operateur1: • "-n"
   63           | • "-z"

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '('     shift, and go to state 45
    '!'     shift, and go to state 46
    '$'     shift, and go to state 25
    "-n"    shift, and go to state 47
    "-z"    shift, and go to state 48

    concatenation     go to state 49
    test_expr         go to state 83
    test_expr2        go to state 51
    test_expr3        go to state 52
    test_instruction  go to state 53
    operande          go to state 54
    operateur1        go to state 55


State 46

   36 concatenation: • concatenation operande
   37              | • operande
   45 test_expr3: '!' • '(' test_expr ')'
   47           | '!' • test_instruction
   48 test_instruction: • concatenation '=' concatenation
   49                 | • concatenation "!=" concatenation
   50                 | • operateur1 concatenation
   51                 | • operande operateur2 operande
   52 operande: • '$' '{' ID '}'
   54         | • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
   55         | • MOT
   56         | • '$' ENTIER
   57         | • '$' '*'
   58         | • '$' '?'
   59         | • CHAINE
   60         | • '$' '(' "expr" somme_entiere ')'
   61         | • '$' '(' appel_de_fonction ')'
   62 operateur1: • "-n"
   63           | • "-z"

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '('     shift, and go to state 84
    '$'     shift, and go to state 25
    "-n"    shift, and go to state 47
    "-z"    shift, and go to state 48

    concatenation     go to state 49
    test_instruction  go to state 85
    operande          go to state 54
    operateur1        go to state 55


State 47

   62 operateur1: "-n" •

    $default  reduce using rule 62 (operateur1)


State 48

   63 operateur1: "-z" •

    $default  reduce using rule 63 (operateur1)


State 49

   36 concatenation: concatenation • operande
   48 test_instruction: concatenation • '=' concatenation
   49                 | concatenation • "!=" concatenation
   52 operande: • '$' '{' ID '}'
   54         | • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
   55         | • MOT
   56         | • '$' ENTIER
   57         | • '$' '*'
   58         | • '$' '?'
   59         | • CHAINE
   60         | • '$' '(' "expr" somme_entiere ')'
   61         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '='     shift, and go to state 86
    "!="    shift, and go to state 87
    '$'     shift, and go to state 25

    operande  go to state 88


State 50

   38 test_bloc: "test" test_expr •  ["then", "do"]
   39 test_expr: test_expr • "-o" test_expr2

    "-o"  shift, and go to state 89

    $default  reduce using rule 38 (test_bloc)


State 51

   40 test_expr: test_expr2 •  ["then", "do", ')', "-o"]
   41 test_expr2: test_expr2 • "-a" test_expr3

    "-a"  shift, and go to state 90

    $default  reduce using rule 40 (test_expr)


State 52

   42 $@2: ε •
   43 test_expr2: test_expr3 • $@2 operande_entier

    $default  reduce using rule 42 ($@2)

    $@2  go to state 91


State 53

   46 test_expr3: test_instruction •

    $default  reduce using rule 46 (test_expr3)


State 54

   37 concatenation: operande •  [MOT, CHAINE, '=', "!=", '$']
   51 test_instruction: operande • operateur2 operande
   64 operateur2: • "-eq"
   65           | • "-ne"
   66           | • "-gt"
   67           | • "-ge"
   68           | • "-lt"
   69           | • "-le"

    "-eq"  shift, and go to state 92
    "-ne"  shift, and go to state 93
    "-gt"  shift, and go to state 94
    "-ge"  shift, and go to state 95
    "-lt"  shift, and go to state 96
    "-le"  shift, and go to state 97

    $default  reduce using rule 37 (concatenation)

    operateur2  go to state 98


State 55

   36 concatenation: • concatenation operande
   37              | • operande
   50 test_instruction: operateur1 • concatenation
   52 operande: • '$' '{' ID '}'
   54         | • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
   55         | • MOT
   56         | • '$' ENTIER
   57         | • '$' '*'
   58         | • '$' '?'
   59         | • CHAINE
   60         | • '$' '(' "expr" somme_entiere ')'
   61         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 25

    concatenation  go to state 99
    operande       go to state 58


State 56

    2 liste_instructions: • liste_instructions ';' instruction
    3                   | • instruction
    4 instruction: • ID '=' concatenation
    5            | • ID '[' operande_entier ']' '=' concatenation
    6            | • "declare" ID '[' ENTIER ']'
    7            | • IF test_bloc "then" liste_instructions else_part "fi"
    7            | IF test_bloc "then" • liste_instructions else_part "fi"
    8            | • "for" ID "do" liste_instructions "done"
    9            | • "for" ID "in" liste_operandes "do" liste_instructions "done"
   10            | • "while" test_bloc "do" liste_instructions "done"
   11            | • "until" test_bloc "do" liste_instructions "done"
   12            | • "case" operande "in" liste_cas "esac"
   13            | • "echo" liste_operandes
   14            | • "read" ID
   15            | • "read" ID '[' operande_entier ']'
   16            | • declaration_de_fonction
   17            | • appel_de_fonction
   18            | • "return"
   19            | • "return" operande_entier
   20            | • "exit"
   21            | • "exit" operande_entier
   88 declaration_de_fonction: • ID '(' ')' '{' decl_loc liste_instructions '}'
   91 appel_de_fonction: • ID liste_operandes
   92                  | • ID

    IF         shift, and go to state 1
    ID         shift, and go to state 2
    "declare"  shift, and go to state 3
    "for"      shift, and go to state 4
    "while"    shift, and go to state 5
    "until"    shift, and go to state 6
    "case"     shift, and go to state 7
    "echo"     shift, and go to state 8
    "read"     shift, and go to state 9
    "return"   shift, and go to state 10
    "exit"     shift, and go to state 11

    liste_instructions       go to state 100
    instruction              go to state 14
    declaration_de_fonction  go to state 15
    appel_de_fonction        go to state 16


State 57

    4 instruction: ID '=' concatenation •  [$end, ';', "fi", "done", "elif", "else", ";;", '}']
   36 concatenation: concatenation • operande
   52 operande: • '$' '{' ID '}'
   54         | • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
   55         | • MOT
   56         | • '$' ENTIER
   57         | • '$' '*'
   58         | • '$' '?'
   59         | • CHAINE
   60         | • '$' '(' "expr" somme_entiere ')'
   61         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 25

    $default  reduce using rule 4 (instruction)

    operande  go to state 88


State 58

   37 concatenation: operande •

    $default  reduce using rule 37 (concatenation)


State 59

    5 instruction: ID '[' operande_entier • ']' '=' concatenation

    ']'  shift, and go to state 101


State 60

   35 liste_operandes: "${" ID • "[*]}"

    "[*]}"  shift, and go to state 102


State 61

   88 declaration_de_fonction: ID '(' ')' • '{' decl_loc liste_instructions '}'

    '{'  shift, and go to state 103


State 62

   56 operande: '$' ENTIER •

    $default  reduce using rule 56 (operande)


State 63

   57 operande: '$' '*' •

    $default  reduce using rule 57 (operande)


State 64

   60 operande: '$' '(' • "expr" somme_entiere ')'
   61         | '$' '(' • appel_de_fonction ')'
   91 appel_de_fonction: • ID liste_operandes
   92                  | • ID

    ID      shift, and go to state 104
    "expr"  shift, and go to state 105

    appel_de_fonction  go to state 106


State 65

   52 operande: '$' '{' • ID '}'
   54         | '$' '{' • ID '[' operande_entier ']' '}' $@3 operande_entier

    ID  shift, and go to state 107


State 66

   58 operande: '$' '?' •

    $default  reduce using rule 58 (operande)


State 67

   32 $@1: ε •
   33 liste_operandes: liste_operandes operande • $@1 operande_entier

    $default  reduce using rule 32 ($@1)

    $@1  go to state 108


State 68

    6 instruction: "declare" ID '[' • ENTIER ']'

    ENTIER  shift, and go to state 109


State 69

    2 liste_instructions: • liste_instructions ';' instruction
    3                   | • instruction
    4 instruction: • ID '=' concatenation
    5            | • ID '[' operande_entier ']' '=' concatenation
    6            | • "declare" ID '[' ENTIER ']'
    7            | • IF test_bloc "then" liste_instructions else_part "fi"
    8            | • "for" ID "do" liste_instructions "done"
    8            | "for" ID "do" • liste_instructions "done"
    9            | • "for" ID "in" liste_operandes "do" liste_instructions "done"
   10            | • "while" test_bloc "do" liste_instructions "done"
   11            | • "until" test_bloc "do" liste_instructions "done"
   12            | • "case" operande "in" liste_cas "esac"
   13            | • "echo" liste_operandes
   14            | • "read" ID
   15            | • "read" ID '[' operande_entier ']'
   16            | • declaration_de_fonction
   17            | • appel_de_fonction
   18            | • "return"
   19            | • "return" operande_entier
   20            | • "exit"
   21            | • "exit" operande_entier
   88 declaration_de_fonction: • ID '(' ')' '{' decl_loc liste_instructions '}'
   91 appel_de_fonction: • ID liste_operandes
   92                  | • ID

    IF         shift, and go to state 1
    ID         shift, and go to state 2
    "declare"  shift, and go to state 3
    "for"      shift, and go to state 4
    "while"    shift, and go to state 5
    "until"    shift, and go to state 6
    "case"     shift, and go to state 7
    "echo"     shift, and go to state 8
    "read"     shift, and go to state 9
    "return"   shift, and go to state 10
    "exit"     shift, and go to state 11

    liste_instructions       go to state 110
    instruction              go to state 14
    declaration_de_fonction  go to state 15
    appel_de_fonction        go to state 16


State 70

    9 instruction: "for" ID "in" • liste_operandes "do" liste_instructions "done"
   33 liste_operandes: • liste_operandes operande $@1 operande_entier
   34                | • operande
   35                | • "${" ID "[*]}"
   52 operande: • '$' '{' ID '}'
   54         | • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
   55         | • MOT
   56         | • '$' ENTIER
   57         | • '$' '*'
   58         | • '$' '?'
   59         | • CHAINE
   60         | • '$' '(' "expr" somme_entiere ')'
   61         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    "${"    shift, and go to state 23
    '$'     shift, and go to state 25

    liste_operandes  go to state 111
    operande         go to state 27


State 71

    2 liste_instructions: • liste_instructions ';' instruction
    3                   | • instruction
    4 instruction: • ID '=' concatenation
    5            | • ID '[' operande_entier ']' '=' concatenation
    6            | • "declare" ID '[' ENTIER ']'
    7            | • IF test_bloc "then" liste_instructions else_part "fi"
    8            | • "for" ID "do" liste_instructions "done"
    9            | • "for" ID "in" liste_operandes "do" liste_instructions "done"
   10            | • "while" test_bloc "do" liste_instructions "done"
   10            | "while" test_bloc "do" • liste_instructions "done"
   11            | • "until" test_bloc "do" liste_instructions "done"
   12            | • "case" operande "in" liste_cas "esac"
   13            | • "echo" liste_operandes
   14            | • "read" ID
   15            | • "read" ID '[' operande_entier ']'
   16            | • declaration_de_fonction
   17            | • appel_de_fonction
   18            | • "return"
   19            | • "return" operande_entier
   20            | • "exit"
   21            | • "exit" operande_entier
   88 declaration_de_fonction: • ID '(' ')' '{' decl_loc liste_instructions '}'
   91 appel_de_fonction: • ID liste_operandes
   92                  | • ID

    IF         shift, and go to state 1
    ID         shift, and go to state 2
    "declare"  shift, and go to state 3
    "for"      shift, and go to state 4
    "while"    shift, and go to state 5
    "until"    shift, and go to state 6
    "case"     shift, and go to state 7
    "echo"     shift, and go to state 8
    "read"     shift, and go to state 9
    "return"   shift, and go to state 10
    "exit"     shift, and go to state 11

    liste_instructions       go to state 112
    instruction              go to state 14
    declaration_de_fonction  go to state 15
    appel_de_fonction        go to state 16


State 72

    2 liste_instructions: • liste_instructions ';' instruction
    3                   | • instruction
    4 instruction: • ID '=' concatenation
    5            | • ID '[' operande_entier ']' '=' concatenation
    6            | • "declare" ID '[' ENTIER ']'
    7            | • IF test_bloc "then" liste_instructions else_part "fi"
    8            | • "for" ID "do" liste_instructions "done"
    9            | • "for" ID "in" liste_operandes "do" liste_instructions "done"
   10            | • "while" test_bloc "do" liste_instructions "done"
   11            | • "until" test_bloc "do" liste_instructions "done"
   11            | "until" test_bloc "do" • liste_instructions "done"
   12            | • "case" operande "in" liste_cas "esac"
   13            | • "echo" liste_operandes
   14            | • "read" ID
   15            | • "read" ID '[' operande_entier ']'
   16            | • declaration_de_fonction
   17            | • appel_de_fonction
   18            | • "return"
   19            | • "return" operande_entier
   20            | • "exit"
   21            | • "exit" operande_entier
   88 declaration_de_fonction: • ID '(' ')' '{' decl_loc liste_instructions '}'
   91 appel_de_fonction: • ID liste_operandes
   92                  | • ID

    IF         shift, and go to state 1
    ID         shift, and go to state 2
    "declare"  shift, and go to state 3
    "for"      shift, and go to state 4
    "while"    shift, and go to state 5
    "until"    shift, and go to state 6
    "case"     shift, and go to state 7
    "echo"     shift, and go to state 8
    "read"     shift, and go to state 9
    "return"   shift, and go to state 10
    "exit"     shift, and go to state 11

    liste_instructions       go to state 113
    instruction              go to state 14
    declaration_de_fonction  go to state 15
    appel_de_fonction        go to state 16


State 73

   12 instruction: "case" operande "in" • liste_cas "esac"
   25 liste_cas: • liste_cas filtre ')' liste_instructions ";;"
   26          | • filtre ')' liste_instructions ";;"
   27 filtre: • MOT
   28       | • CHAINE
   29       | • filtre '|' MOT
   30       | • filtre '|' CHAINE
   31       | • '*'

    MOT     shift, and go to state 114
    CHAINE  shift, and go to state 115
    '*'     shift, and go to state 116

    liste_cas  go to state 117
    filtre     go to state 118


State 74

   15 instruction: "read" ID '[' • operande_entier ']'
   74 operande_entier: • '$' '{' ID '}'
   75                | • '$' '{' ID '[' operande_entier ']' '}'
   76                | • '$' ENTIER
   77                | • plus_ou_moins '$' '{' ID '}'
   78                | • plus_ou_moins '$' '{' ID '[' operande_entier ']' '}'
   79                | • plus_ou_moins '$' ENTIER
   80                | • ENTIER
   81                | • plus_ou_moins ENTIER
   82                | • '(' somme_entiere ')'
   83 plus_ou_moins: • '+'
   84              | • '-'

    ENTIER  shift, and go to state 35
    '+'     shift, and go to state 36
    '-'     shift, and go to state 37
    '('     shift, and go to state 38
    '$'     shift, and go to state 39

    operande_entier  go to state 119
    plus_ou_moins    go to state 41


State 75

   70 somme_entiere: somme_entiere • plus_ou_moins produit_entier
   82 operande_entier: '(' somme_entiere • ')'
   83 plus_ou_moins: • '+'
   84              | • '-'

    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    ')'  shift, and go to state 120

    plus_ou_moins  go to state 121


State 76

   71 somme_entiere: produit_entier •  ['+', '-', ')']
   72 produit_entier: produit_entier • fois_div_mod operande_entier
   85 fois_div_mod: • '*'
   86             | • '/'
   87             | • '%'

    '*'  shift, and go to state 122
    '/'  shift, and go to state 123
    '%'  shift, and go to state 124

    $default  reduce using rule 71 (somme_entiere)

    fois_div_mod  go to state 125


State 77

   73 produit_entier: operande_entier •

    $default  reduce using rule 73 (produit_entier)


State 78

   76 operande_entier: '$' ENTIER •

    $default  reduce using rule 76 (operande_entier)


State 79

   74 operande_entier: '$' '{' • ID '}'
   75                | '$' '{' • ID '[' operande_entier ']' '}'

    ID  shift, and go to state 126


State 80

   81 operande_entier: plus_ou_moins ENTIER •

    $default  reduce using rule 81 (operande_entier)


State 81

   77 operande_entier: plus_ou_moins '$' • '{' ID '}'
   78                | plus_ou_moins '$' • '{' ID '[' operande_entier ']' '}'
   79                | plus_ou_moins '$' • ENTIER

    ENTIER  shift, and go to state 127
    '{'     shift, and go to state 128


State 82

    2 liste_instructions: liste_instructions ';' instruction •

    $default  reduce using rule 2 (liste_instructions)


State 83

   39 test_expr: test_expr • "-o" test_expr2
   44 test_expr3: '(' test_expr • ')'

    ')'   shift, and go to state 129
    "-o"  shift, and go to state 89


State 84

   36 concatenation: • concatenation operande
   37              | • operande
   39 test_expr: • test_expr "-o" test_expr2
   40          | • test_expr2
   41 test_expr2: • test_expr2 "-a" test_expr3
   43           | • test_expr3 $@2 operande_entier
   44 test_expr3: • '(' test_expr ')'
   45           | • '!' '(' test_expr ')'
   45           | '!' '(' • test_expr ')'
   46           | • test_instruction
   47           | • '!' test_instruction
   48 test_instruction: • concatenation '=' concatenation
   49                 | • concatenation "!=" concatenation
   50                 | • operateur1 concatenation
   51                 | • operande operateur2 operande
   52 operande: • '$' '{' ID '}'
   54         | • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
   55         | • MOT
   56         | • '$' ENTIER
   57         | • '$' '*'
   58         | • '$' '?'
   59         | • CHAINE
   60         | • '$' '(' "expr" somme_entiere ')'
   61         | • '$' '(' appel_de_fonction ')'
   62 operateur1: • "-n"
   63           | • "-z"

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '('     shift, and go to state 45
    '!'     shift, and go to state 46
    '$'     shift, and go to state 25
    "-n"    shift, and go to state 47
    "-z"    shift, and go to state 48

    concatenation     go to state 49
    test_expr         go to state 130
    test_expr2        go to state 51
    test_expr3        go to state 52
    test_instruction  go to state 53
    operande          go to state 54
    operateur1        go to state 55


State 85

   47 test_expr3: '!' test_instruction •

    $default  reduce using rule 47 (test_expr3)


State 86

   36 concatenation: • concatenation operande
   37              | • operande
   48 test_instruction: concatenation '=' • concatenation
   52 operande: • '$' '{' ID '}'
   54         | • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
   55         | • MOT
   56         | • '$' ENTIER
   57         | • '$' '*'
   58         | • '$' '?'
   59         | • CHAINE
   60         | • '$' '(' "expr" somme_entiere ')'
   61         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 25

    concatenation  go to state 131
    operande       go to state 58


State 87

   36 concatenation: • concatenation operande
   37              | • operande
   49 test_instruction: concatenation "!=" • concatenation
   52 operande: • '$' '{' ID '}'
   54         | • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
   55         | • MOT
   56         | • '$' ENTIER
   57         | • '$' '*'
   58         | • '$' '?'
   59         | • CHAINE
   60         | • '$' '(' "expr" somme_entiere ')'
   61         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 25

    concatenation  go to state 132
    operande       go to state 58


State 88

   36 concatenation: concatenation operande •

    $default  reduce using rule 36 (concatenation)


State 89

   36 concatenation: • concatenation operande
   37              | • operande
   39 test_expr: test_expr "-o" • test_expr2
   41 test_expr2: • test_expr2 "-a" test_expr3
   43           | • test_expr3 $@2 operande_entier
   44 test_expr3: • '(' test_expr ')'
   45           | • '!' '(' test_expr ')'
   46           | • test_instruction
   47           | • '!' test_instruction
   48 test_instruction: • concatenation '=' concatenation
   49                 | • concatenation "!=" concatenation
   50                 | • operateur1 concatenation
   51                 | • operande operateur2 operande
   52 operande: • '$' '{' ID '}'
   54         | • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
   55         | • MOT
   56         | • '$' ENTIER
   57         | • '$' '*'
   58         | • '$' '?'
   59         | • CHAINE
   60         | • '$' '(' "expr" somme_entiere ')'
   61         | • '$' '(' appel_de_fonction ')'
   62 operateur1: • "-n"
   63           | • "-z"

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '('     shift, and go to state 45
    '!'     shift, and go to state 46
    '$'     shift, and go to state 25
    "-n"    shift, and go to state 47
    "-z"    shift, and go to state 48

    concatenation     go to state 49
    test_expr2        go to state 133
    test_expr3        go to state 52
    test_instruction  go to state 53
    operande          go to state 54
    operateur1        go to state 55


State 90

   36 concatenation: • concatenation operande
   37              | • operande
   41 test_expr2: test_expr2 "-a" • test_expr3
   44 test_expr3: • '(' test_expr ')'
   45           | • '!' '(' test_expr ')'
   46           | • test_instruction
   47           | • '!' test_instruction
   48 test_instruction: • concatenation '=' concatenation
   49                 | • concatenation "!=" concatenation
   50                 | • operateur1 concatenation
   51                 | • operande operateur2 operande
   52 operande: • '$' '{' ID '}'
   54         | • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
   55         | • MOT
   56         | • '$' ENTIER
   57         | • '$' '*'
   58         | • '$' '?'
   59         | • CHAINE
   60         | • '$' '(' "expr" somme_entiere ')'
   61         | • '$' '(' appel_de_fonction ')'
   62 operateur1: • "-n"
   63           | • "-z"

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '('     shift, and go to state 45
    '!'     shift, and go to state 46
    '$'     shift, and go to state 25
    "-n"    shift, and go to state 47
    "-z"    shift, and go to state 48

    concatenation     go to state 49
    test_expr3        go to state 134
    test_instruction  go to state 53
    operande          go to state 54
    operateur1        go to state 55


State 91

   43 test_expr2: test_expr3 $@2 • operande_entier
   74 operande_entier: • '$' '{' ID '}'
   75                | • '$' '{' ID '[' operande_entier ']' '}'
   76                | • '$' ENTIER
   77                | • plus_ou_moins '$' '{' ID '}'
   78                | • plus_ou_moins '$' '{' ID '[' operande_entier ']' '}'
   79                | • plus_ou_moins '$' ENTIER
   80                | • ENTIER
   81                | • plus_ou_moins ENTIER
   82                | • '(' somme_entiere ')'
   83 plus_ou_moins: • '+'
   84              | • '-'

    ENTIER  shift, and go to state 35
    '+'     shift, and go to state 36
    '-'     shift, and go to state 37
    '('     shift, and go to state 38
    '$'     shift, and go to state 39

    operande_entier  go to state 135
    plus_ou_moins    go to state 41


State 92

   64 operateur2: "-eq" •

    $default  reduce using rule 64 (operateur2)


State 93

   65 operateur2: "-ne" •

    $default  reduce using rule 65 (operateur2)


State 94

   66 operateur2: "-gt" •

    $default  reduce using rule 66 (operateur2)


State 95

   67 operateur2: "-ge" •

    $default  reduce using rule 67 (operateur2)


State 96

   68 operateur2: "-lt" •

    $default  reduce using rule 68 (operateur2)


State 97

   69 operateur2: "-le" •

    $default  reduce using rule 69 (operateur2)


State 98

   51 test_instruction: operande operateur2 • operande
   52 operande: • '$' '{' ID '}'
   54         | • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
   55         | • MOT
   56         | • '$' ENTIER
   57         | • '$' '*'
   58         | • '$' '?'
   59         | • CHAINE
   60         | • '$' '(' "expr" somme_entiere ')'
   61         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 25

    operande  go to state 136


State 99

   36 concatenation: concatenation • operande
   50 test_instruction: operateur1 concatenation •  [ENTIER, '+', '-', "then", "do", ')', "-o", "-a", '(', '$']
   52 operande: • '$' '{' ID '}'
   54         | • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
   55         | • MOT
   56         | • '$' ENTIER
   57         | • '$' '*'
   58         | • '$' '?'
   59         | • CHAINE
   60         | • '$' '(' "expr" somme_entiere ')'
   61         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 25

    '$'       [reduce using rule 50 (test_instruction)]
    $default  reduce using rule 50 (test_instruction)

    operande  go to state 88

    shift/reduce conflict on token '$':
       50 test_instruction: operateur1 concatenation •
       52 operande: • '$' '{' ID '}'
      Example: operateur1 concatenation • '$' '{' ID '}'
      Shift derivation
        test_expr3
        ↳ 46: test_instruction
              ↳ 50: operateur1 concatenation
                               ↳ 36: concatenation operande
                                                   ↳ 52: • '$' '{' ID '}'
      Reduce derivation
        test_expr
        ↳ 40: test_expr2
              ↳ 43: test_expr3                             $@2     operande_entier
                    ↳ 46: test_instruction                 ↳ 43: ε ↳ 74: '$' '{' ID '}'
                          ↳ 50: operateur1 concatenation •

    shift/reduce conflict on token '$':
       50 test_instruction: operateur1 concatenation •
       54 operande: • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
      First example: IF "test" operateur1 concatenation • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier $@2 operande_entier "then" liste_instructions else_part "fi" $end
      Shift derivation
        $accept
        ↳ 0: programme                                                                                                                                                                                                       $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                                                                            "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_instruction                                                                                        $@2 operande_entier
                                                        ↳ 50: operateur1 concatenation
                                                                         ↳ 36: concatenation operande
                                                                                             ↳ 54: • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
      Second example: IF "test" operateur1 concatenation • $@2 '$' '{' ID '}' "then" liste_instructions else_part "fi" $end
      Reduce derivation
        $accept
        ↳ 0: programme                                                                                                                                           $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_expr3                             $@2 operande_entier
                                                        ↳ 46: test_instruction                     ↳ 74: '$' '{' ID '}'
                                                              ↳ 50: operateur1 concatenation •

    shift/reduce conflict on token '$':
       50 test_instruction: operateur1 concatenation •
       56 operande: • '$' ENTIER
      First example: IF "test" operateur1 concatenation • '$' ENTIER $@2 operande_entier "then" liste_instructions else_part "fi" $end
      Shift derivation
        $accept
        ↳ 0: programme                                                                                                                                                       $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                            "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_instruction                                        $@2 operande_entier
                                                        ↳ 50: operateur1 concatenation
                                                                         ↳ 36: concatenation operande
                                                                                             ↳ 56: • '$' ENTIER
      Second example: IF "test" operateur1 concatenation • $@2 '$' '{' ID '}' "then" liste_instructions else_part "fi" $end
      Reduce derivation
        $accept
        ↳ 0: programme                                                                                                                                           $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_expr3                             $@2 operande_entier
                                                        ↳ 46: test_instruction                     ↳ 74: '$' '{' ID '}'
                                                              ↳ 50: operateur1 concatenation •

    shift/reduce conflict on token '$':
       50 test_instruction: operateur1 concatenation •
       57 operande: • '$' '*'
      First example: IF "test" operateur1 concatenation • '$' '*' $@2 operande_entier "then" liste_instructions else_part "fi" $end
      Shift derivation
        $accept
        ↳ 0: programme                                                                                                                                                    $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                         "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_instruction                                     $@2 operande_entier
                                                        ↳ 50: operateur1 concatenation
                                                                         ↳ 36: concatenation operande
                                                                                             ↳ 57: • '$' '*'
      Second example: IF "test" operateur1 concatenation • $@2 '$' '{' ID '}' "then" liste_instructions else_part "fi" $end
      Reduce derivation
        $accept
        ↳ 0: programme                                                                                                                                           $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_expr3                             $@2 operande_entier
                                                        ↳ 46: test_instruction                     ↳ 74: '$' '{' ID '}'
                                                              ↳ 50: operateur1 concatenation •

    shift/reduce conflict on token '$':
       50 test_instruction: operateur1 concatenation •
       58 operande: • '$' '?'
      First example: IF "test" operateur1 concatenation • '$' '?' $@2 operande_entier "then" liste_instructions else_part "fi" $end
      Shift derivation
        $accept
        ↳ 0: programme                                                                                                                                                    $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                         "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_instruction                                     $@2 operande_entier
                                                        ↳ 50: operateur1 concatenation
                                                                         ↳ 36: concatenation operande
                                                                                             ↳ 58: • '$' '?'
      Second example: IF "test" operateur1 concatenation • $@2 '$' '{' ID '}' "then" liste_instructions else_part "fi" $end
      Reduce derivation
        $accept
        ↳ 0: programme                                                                                                                                           $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_expr3                             $@2 operande_entier
                                                        ↳ 46: test_instruction                     ↳ 74: '$' '{' ID '}'
                                                              ↳ 50: operateur1 concatenation •

    shift/reduce conflict on token '$':
       50 test_instruction: operateur1 concatenation •
       60 operande: • '$' '(' "expr" somme_entiere ')'
      First example: IF "test" operateur1 concatenation • '$' '(' "expr" somme_entiere ')' $@2 operande_entier "then" liste_instructions else_part "fi" $end
      Shift derivation
        $accept
        ↳ 0: programme                                                                                                                                                                             $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                                                  "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_instruction                                                              $@2 operande_entier
                                                        ↳ 50: operateur1 concatenation
                                                                         ↳ 36: concatenation operande
                                                                                             ↳ 60: • '$' '(' "expr" somme_entiere ')'
      Second example: IF "test" operateur1 concatenation • $@2 '$' '{' ID '}' "then" liste_instructions else_part "fi" $end
      Reduce derivation
        $accept
        ↳ 0: programme                                                                                                                                           $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_expr3                             $@2 operande_entier
                                                        ↳ 46: test_instruction                     ↳ 74: '$' '{' ID '}'
                                                              ↳ 50: operateur1 concatenation •

    shift/reduce conflict on token '$':
       50 test_instruction: operateur1 concatenation •
       61 operande: • '$' '(' appel_de_fonction ')'
      First example: IF "test" operateur1 concatenation • '$' '(' appel_de_fonction ')' $@2 operande_entier "then" liste_instructions else_part "fi" $end
      Shift derivation
        $accept
        ↳ 0: programme                                                                                                                                                                          $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                                               "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_instruction                                                           $@2 operande_entier
                                                        ↳ 50: operateur1 concatenation
                                                                         ↳ 36: concatenation operande
                                                                                             ↳ 61: • '$' '(' appel_de_fonction ')'
      Second example: IF "test" operateur1 concatenation • $@2 '$' '{' ID '}' "then" liste_instructions else_part "fi" $end
      Reduce derivation
        $accept
        ↳ 0: programme                                                                                                                                           $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_expr3                             $@2 operande_entier
                                                        ↳ 46: test_instruction                     ↳ 74: '$' '{' ID '}'
                                                              ↳ 50: operateur1 concatenation •



State 100

    2 liste_instructions: liste_instructions • ';' instruction
    7 instruction: IF test_bloc "then" liste_instructions • else_part "fi"
   22 else_part: • "elif" test_bloc "then" liste_instructions else_part
   23          | • "else" liste_instructions
   24          | ε •  ["fi"]

    ';'     shift, and go to state 44
    "elif"  shift, and go to state 137
    "else"  shift, and go to state 138

    $default  reduce using rule 24 (else_part)

    else_part  go to state 139


State 101

    5 instruction: ID '[' operande_entier ']' • '=' concatenation

    '='  shift, and go to state 140


State 102

   35 liste_operandes: "${" ID "[*]}" •

    $default  reduce using rule 35 (liste_operandes)


State 103

   88 declaration_de_fonction: ID '(' ')' '{' • decl_loc liste_instructions '}'
   89 decl_loc: • decl_loc "local" ID '=' concatenation ';'
   90         | ε •

    $default  reduce using rule 90 (decl_loc)

    decl_loc  go to state 141


State 104

   33 liste_operandes: • liste_operandes operande $@1 operande_entier
   34                | • operande
   35                | • "${" ID "[*]}"
   52 operande: • '$' '{' ID '}'
   54         | • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
   55         | • MOT
   56         | • '$' ENTIER
   57         | • '$' '*'
   58         | • '$' '?'
   59         | • CHAINE
   60         | • '$' '(' "expr" somme_entiere ')'
   61         | • '$' '(' appel_de_fonction ')'
   91 appel_de_fonction: ID • liste_operandes
   92                  | ID •  [')']

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    "${"    shift, and go to state 23
    '$'     shift, and go to state 25

    $default  reduce using rule 92 (appel_de_fonction)

    liste_operandes  go to state 26
    operande         go to state 27


State 105

   60 operande: '$' '(' "expr" • somme_entiere ')'
   70 somme_entiere: • somme_entiere plus_ou_moins produit_entier
   71              | • produit_entier
   72 produit_entier: • produit_entier fois_div_mod operande_entier
   73               | • operande_entier
   74 operande_entier: • '$' '{' ID '}'
   75                | • '$' '{' ID '[' operande_entier ']' '}'
   76                | • '$' ENTIER
   77                | • plus_ou_moins '$' '{' ID '}'
   78                | • plus_ou_moins '$' '{' ID '[' operande_entier ']' '}'
   79                | • plus_ou_moins '$' ENTIER
   80                | • ENTIER
   81                | • plus_ou_moins ENTIER
   82                | • '(' somme_entiere ')'
   83 plus_ou_moins: • '+'
   84              | • '-'

    ENTIER  shift, and go to state 35
    '+'     shift, and go to state 36
    '-'     shift, and go to state 37
    '('     shift, and go to state 38
    '$'     shift, and go to state 39

    somme_entiere    go to state 142
    produit_entier   go to state 76
    operande_entier  go to state 77
    plus_ou_moins    go to state 41


State 106

   61 operande: '$' '(' appel_de_fonction • ')'

    ')'  shift, and go to state 143


State 107

   52 operande: '$' '{' ID • '}'
   54         | '$' '{' ID • '[' operande_entier ']' '}' $@3 operande_entier

    '['  shift, and go to state 144
    '}'  shift, and go to state 145


State 108

   33 liste_operandes: liste_operandes operande $@1 • operande_entier
   74 operande_entier: • '$' '{' ID '}'
   75                | • '$' '{' ID '[' operande_entier ']' '}'
   76                | • '$' ENTIER
   77                | • plus_ou_moins '$' '{' ID '}'
   78                | • plus_ou_moins '$' '{' ID '[' operande_entier ']' '}'
   79                | • plus_ou_moins '$' ENTIER
   80                | • ENTIER
   81                | • plus_ou_moins ENTIER
   82                | • '(' somme_entiere ')'
   83 plus_ou_moins: • '+'
   84              | • '-'

    ENTIER  shift, and go to state 35
    '+'     shift, and go to state 36
    '-'     shift, and go to state 37
    '('     shift, and go to state 38
    '$'     shift, and go to state 39

    operande_entier  go to state 146
    plus_ou_moins    go to state 41


State 109

    6 instruction: "declare" ID '[' ENTIER • ']'

    ']'  shift, and go to state 147


State 110

    2 liste_instructions: liste_instructions • ';' instruction
    8 instruction: "for" ID "do" liste_instructions • "done"

    ';'     shift, and go to state 44
    "done"  shift, and go to state 148


State 111

    9 instruction: "for" ID "in" liste_operandes • "do" liste_instructions "done"
   33 liste_operandes: liste_operandes • operande $@1 operande_entier
   52 operande: • '$' '{' ID '}'
   54         | • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
   55         | • MOT
   56         | • '$' ENTIER
   57         | • '$' '*'
   58         | • '$' '?'
   59         | • CHAINE
   60         | • '$' '(' "expr" somme_entiere ')'
   61         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    "do"    shift, and go to state 149
    '$'     shift, and go to state 25

    operande  go to state 67


State 112

    2 liste_instructions: liste_instructions • ';' instruction
   10 instruction: "while" test_bloc "do" liste_instructions • "done"

    ';'     shift, and go to state 44
    "done"  shift, and go to state 150


State 113

    2 liste_instructions: liste_instructions • ';' instruction
   11 instruction: "until" test_bloc "do" liste_instructions • "done"

    ';'     shift, and go to state 44
    "done"  shift, and go to state 151


State 114

   27 filtre: MOT •

    $default  reduce using rule 27 (filtre)


State 115

   28 filtre: CHAINE •

    $default  reduce using rule 28 (filtre)


State 116

   31 filtre: '*' •

    $default  reduce using rule 31 (filtre)


State 117

   12 instruction: "case" operande "in" liste_cas • "esac"
   25 liste_cas: liste_cas • filtre ')' liste_instructions ";;"
   27 filtre: • MOT
   28       | • CHAINE
   29       | • filtre '|' MOT
   30       | • filtre '|' CHAINE
   31       | • '*'

    MOT     shift, and go to state 114
    CHAINE  shift, and go to state 115
    '*'     shift, and go to state 116
    "esac"  shift, and go to state 152

    filtre  go to state 153


State 118

   26 liste_cas: filtre • ')' liste_instructions ";;"
   29 filtre: filtre • '|' MOT
   30       | filtre • '|' CHAINE

    ')'  shift, and go to state 154
    '|'  shift, and go to state 155


State 119

   15 instruction: "read" ID '[' operande_entier • ']'

    ']'  shift, and go to state 156


State 120

   82 operande_entier: '(' somme_entiere ')' •

    $default  reduce using rule 82 (operande_entier)


State 121

   70 somme_entiere: somme_entiere plus_ou_moins • produit_entier
   72 produit_entier: • produit_entier fois_div_mod operande_entier
   73               | • operande_entier
   74 operande_entier: • '$' '{' ID '}'
   75                | • '$' '{' ID '[' operande_entier ']' '}'
   76                | • '$' ENTIER
   77                | • plus_ou_moins '$' '{' ID '}'
   78                | • plus_ou_moins '$' '{' ID '[' operande_entier ']' '}'
   79                | • plus_ou_moins '$' ENTIER
   80                | • ENTIER
   81                | • plus_ou_moins ENTIER
   82                | • '(' somme_entiere ')'
   83 plus_ou_moins: • '+'
   84              | • '-'

    ENTIER  shift, and go to state 35
    '+'     shift, and go to state 36
    '-'     shift, and go to state 37
    '('     shift, and go to state 38
    '$'     shift, and go to state 39

    produit_entier   go to state 157
    operande_entier  go to state 77
    plus_ou_moins    go to state 41


State 122

   85 fois_div_mod: '*' •

    $default  reduce using rule 85 (fois_div_mod)


State 123

   86 fois_div_mod: '/' •

    $default  reduce using rule 86 (fois_div_mod)


State 124

   87 fois_div_mod: '%' •

    $default  reduce using rule 87 (fois_div_mod)


State 125

   72 produit_entier: produit_entier fois_div_mod • operande_entier
   74 operande_entier: • '$' '{' ID '}'
   75                | • '$' '{' ID '[' operande_entier ']' '}'
   76                | • '$' ENTIER
   77                | • plus_ou_moins '$' '{' ID '}'
   78                | • plus_ou_moins '$' '{' ID '[' operande_entier ']' '}'
   79                | • plus_ou_moins '$' ENTIER
   80                | • ENTIER
   81                | • plus_ou_moins ENTIER
   82                | • '(' somme_entiere ')'
   83 plus_ou_moins: • '+'
   84              | • '-'

    ENTIER  shift, and go to state 35
    '+'     shift, and go to state 36
    '-'     shift, and go to state 37
    '('     shift, and go to state 38
    '$'     shift, and go to state 39

    operande_entier  go to state 158
    plus_ou_moins    go to state 41


State 126

   74 operande_entier: '$' '{' ID • '}'
   75                | '$' '{' ID • '[' operande_entier ']' '}'

    '['  shift, and go to state 159
    '}'  shift, and go to state 160


State 127

   79 operande_entier: plus_ou_moins '$' ENTIER •

    $default  reduce using rule 79 (operande_entier)


State 128

   77 operande_entier: plus_ou_moins '$' '{' • ID '}'
   78                | plus_ou_moins '$' '{' • ID '[' operande_entier ']' '}'

    ID  shift, and go to state 161


State 129

   44 test_expr3: '(' test_expr ')' •

    $default  reduce using rule 44 (test_expr3)


State 130

   39 test_expr: test_expr • "-o" test_expr2
   45 test_expr3: '!' '(' test_expr • ')'

    ')'   shift, and go to state 162
    "-o"  shift, and go to state 89


State 131

   36 concatenation: concatenation • operande
   48 test_instruction: concatenation '=' concatenation •  [ENTIER, '+', '-', "then", "do", ')', "-o", "-a", '(', '$']
   52 operande: • '$' '{' ID '}'
   54         | • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
   55         | • MOT
   56         | • '$' ENTIER
   57         | • '$' '*'
   58         | • '$' '?'
   59         | • CHAINE
   60         | • '$' '(' "expr" somme_entiere ')'
   61         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 25

    '$'       [reduce using rule 48 (test_instruction)]
    $default  reduce using rule 48 (test_instruction)

    operande  go to state 88

    shift/reduce conflict on token '$':
       48 test_instruction: concatenation '=' concatenation •
       52 operande: • '$' '{' ID '}'
      First example: IF "test" concatenation '=' concatenation • '$' '{' ID '}' $@2 operande_entier "then" liste_instructions else_part "fi" $end
      Shift derivation
        $accept
        ↳ 0: programme                                                                                                                                                                  $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                                       "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_instruction                                                   $@2 operande_entier
                                                        ↳ 48: concatenation '=' concatenation
                                                                                ↳ 36: concatenation operande
                                                                                                    ↳ 52: • '$' '{' ID '}'
      Second example: IF "test" concatenation '=' concatenation • $@2 '$' '{' ID '}' "then" liste_instructions else_part "fi" $end
      Reduce derivation
        $accept
        ↳ 0: programme                                                                                                                                                  $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                       "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_expr3                                    $@2 operande_entier
                                                        ↳ 46: test_instruction                            ↳ 74: '$' '{' ID '}'
                                                              ↳ 48: concatenation '=' concatenation •

    shift/reduce conflict on token '$':
       48 test_instruction: concatenation '=' concatenation •
       54 operande: • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
      First example: IF "test" concatenation '=' concatenation • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier $@2 operande_entier "then" liste_instructions else_part "fi" $end
      Shift derivation
        $accept
        ↳ 0: programme                                                                                                                                                                                                              $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                                                                                   "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_instruction                                                                                               $@2 operande_entier
                                                        ↳ 48: concatenation '=' concatenation
                                                                                ↳ 36: concatenation operande
                                                                                                    ↳ 54: • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
      Second example: IF "test" concatenation '=' concatenation • $@2 '$' '{' ID '}' "then" liste_instructions else_part "fi" $end
      Reduce derivation
        $accept
        ↳ 0: programme                                                                                                                                                  $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                       "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_expr3                                    $@2 operande_entier
                                                        ↳ 46: test_instruction                            ↳ 74: '$' '{' ID '}'
                                                              ↳ 48: concatenation '=' concatenation •

    shift/reduce conflict on token '$':
       48 test_instruction: concatenation '=' concatenation •
       56 operande: • '$' ENTIER
      First example: IF "test" concatenation '=' concatenation • '$' ENTIER $@2 operande_entier "then" liste_instructions else_part "fi" $end
      Shift derivation
        $accept
        ↳ 0: programme                                                                                                                                                              $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                                   "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_instruction                                               $@2 operande_entier
                                                        ↳ 48: concatenation '=' concatenation
                                                                                ↳ 36: concatenation operande
                                                                                                    ↳ 56: • '$' ENTIER
      Second example: IF "test" concatenation '=' concatenation • $@2 '$' '{' ID '}' "then" liste_instructions else_part "fi" $end
      Reduce derivation
        $accept
        ↳ 0: programme                                                                                                                                                  $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                       "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_expr3                                    $@2 operande_entier
                                                        ↳ 46: test_instruction                            ↳ 74: '$' '{' ID '}'
                                                              ↳ 48: concatenation '=' concatenation •

    shift/reduce conflict on token '$':
       48 test_instruction: concatenation '=' concatenation •
       57 operande: • '$' '*'
      First example: IF "test" concatenation '=' concatenation • '$' '*' $@2 operande_entier "then" liste_instructions else_part "fi" $end
      Shift derivation
        $accept
        ↳ 0: programme                                                                                                                                                           $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                                "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_instruction                                            $@2 operande_entier
                                                        ↳ 48: concatenation '=' concatenation
                                                                                ↳ 36: concatenation operande
                                                                                                    ↳ 57: • '$' '*'
      Second example: IF "test" concatenation '=' concatenation • $@2 '$' '{' ID '}' "then" liste_instructions else_part "fi" $end
      Reduce derivation
        $accept
        ↳ 0: programme                                                                                                                                                  $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                       "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_expr3                                    $@2 operande_entier
                                                        ↳ 46: test_instruction                            ↳ 74: '$' '{' ID '}'
                                                              ↳ 48: concatenation '=' concatenation •

    shift/reduce conflict on token '$':
       48 test_instruction: concatenation '=' concatenation •
       58 operande: • '$' '?'
      First example: IF "test" concatenation '=' concatenation • '$' '?' $@2 operande_entier "then" liste_instructions else_part "fi" $end
      Shift derivation
        $accept
        ↳ 0: programme                                                                                                                                                           $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                                "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_instruction                                            $@2 operande_entier
                                                        ↳ 48: concatenation '=' concatenation
                                                                                ↳ 36: concatenation operande
                                                                                                    ↳ 58: • '$' '?'
      Second example: IF "test" concatenation '=' concatenation • $@2 '$' '{' ID '}' "then" liste_instructions else_part "fi" $end
      Reduce derivation
        $accept
        ↳ 0: programme                                                                                                                                                  $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                       "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_expr3                                    $@2 operande_entier
                                                        ↳ 46: test_instruction                            ↳ 74: '$' '{' ID '}'
                                                              ↳ 48: concatenation '=' concatenation •

    shift/reduce conflict on token '$':
       48 test_instruction: concatenation '=' concatenation •
       60 operande: • '$' '(' "expr" somme_entiere ')'
      First example: IF "test" concatenation '=' concatenation • '$' '(' "expr" somme_entiere ')' $@2 operande_entier "then" liste_instructions else_part "fi" $end
      Shift derivation
        $accept
        ↳ 0: programme                                                                                                                                                                                    $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                                                         "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_instruction                                                                     $@2 operande_entier
                                                        ↳ 48: concatenation '=' concatenation
                                                                                ↳ 36: concatenation operande
                                                                                                    ↳ 60: • '$' '(' "expr" somme_entiere ')'
      Second example: IF "test" concatenation '=' concatenation • $@2 '$' '{' ID '}' "then" liste_instructions else_part "fi" $end
      Reduce derivation
        $accept
        ↳ 0: programme                                                                                                                                                  $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                       "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_expr3                                    $@2 operande_entier
                                                        ↳ 46: test_instruction                            ↳ 74: '$' '{' ID '}'
                                                              ↳ 48: concatenation '=' concatenation •

    shift/reduce conflict on token '$':
       48 test_instruction: concatenation '=' concatenation •
       61 operande: • '$' '(' appel_de_fonction ')'
      First example: IF "test" concatenation '=' concatenation • '$' '(' appel_de_fonction ')' $@2 operande_entier "then" liste_instructions else_part "fi" $end
      Shift derivation
        $accept
        ↳ 0: programme                                                                                                                                                                                 $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                                                      "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_instruction                                                                  $@2 operande_entier
                                                        ↳ 48: concatenation '=' concatenation
                                                                                ↳ 36: concatenation operande
                                                                                                    ↳ 61: • '$' '(' appel_de_fonction ')'
      Second example: IF "test" concatenation '=' concatenation • $@2 '$' '{' ID '}' "then" liste_instructions else_part "fi" $end
      Reduce derivation
        $accept
        ↳ 0: programme                                                                                                                                                  $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                       "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_expr3                                    $@2 operande_entier
                                                        ↳ 46: test_instruction                            ↳ 74: '$' '{' ID '}'
                                                              ↳ 48: concatenation '=' concatenation •



State 132

   36 concatenation: concatenation • operande
   49 test_instruction: concatenation "!=" concatenation •  [ENTIER, '+', '-', "then", "do", ')', "-o", "-a", '(', '$']
   52 operande: • '$' '{' ID '}'
   54         | • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
   55         | • MOT
   56         | • '$' ENTIER
   57         | • '$' '*'
   58         | • '$' '?'
   59         | • CHAINE
   60         | • '$' '(' "expr" somme_entiere ')'
   61         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 25

    '$'       [reduce using rule 49 (test_instruction)]
    $default  reduce using rule 49 (test_instruction)

    operande  go to state 88

    shift/reduce conflict on token '$':
       49 test_instruction: concatenation "!=" concatenation •
       52 operande: • '$' '{' ID '}'
      First example: IF "test" concatenation "!=" concatenation • '$' '{' ID '}' $@2 operande_entier "then" liste_instructions else_part "fi" $end
      Shift derivation
        $accept
        ↳ 0: programme                                                                                                                                                                   $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                                        "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_instruction                                                    $@2 operande_entier
                                                        ↳ 49: concatenation "!=" concatenation
                                                                                 ↳ 36: concatenation operande
                                                                                                     ↳ 52: • '$' '{' ID '}'
      Second example: IF "test" concatenation "!=" concatenation • $@2 '$' '{' ID '}' "then" liste_instructions else_part "fi" $end
      Reduce derivation
        $accept
        ↳ 0: programme                                                                                                                                                   $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                        "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_expr3                                     $@2 operande_entier
                                                        ↳ 46: test_instruction                             ↳ 74: '$' '{' ID '}'
                                                              ↳ 49: concatenation "!=" concatenation •

    shift/reduce conflict on token '$':
       49 test_instruction: concatenation "!=" concatenation •
       54 operande: • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
      First example: IF "test" concatenation "!=" concatenation • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier $@2 operande_entier "then" liste_instructions else_part "fi" $end
      Shift derivation
        $accept
        ↳ 0: programme                                                                                                                                                                                                               $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                                                                                    "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_instruction                                                                                                $@2 operande_entier
                                                        ↳ 49: concatenation "!=" concatenation
                                                                                 ↳ 36: concatenation operande
                                                                                                     ↳ 54: • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
      Second example: IF "test" concatenation "!=" concatenation • $@2 '$' '{' ID '}' "then" liste_instructions else_part "fi" $end
      Reduce derivation
        $accept
        ↳ 0: programme                                                                                                                                                   $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                        "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_expr3                                     $@2 operande_entier
                                                        ↳ 46: test_instruction                             ↳ 74: '$' '{' ID '}'
                                                              ↳ 49: concatenation "!=" concatenation •

    shift/reduce conflict on token '$':
       49 test_instruction: concatenation "!=" concatenation •
       56 operande: • '$' ENTIER
      First example: IF "test" concatenation "!=" concatenation • '$' ENTIER $@2 operande_entier "then" liste_instructions else_part "fi" $end
      Shift derivation
        $accept
        ↳ 0: programme                                                                                                                                                               $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                                    "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_instruction                                                $@2 operande_entier
                                                        ↳ 49: concatenation "!=" concatenation
                                                                                 ↳ 36: concatenation operande
                                                                                                     ↳ 56: • '$' ENTIER
      Second example: IF "test" concatenation "!=" concatenation • $@2 '$' '{' ID '}' "then" liste_instructions else_part "fi" $end
      Reduce derivation
        $accept
        ↳ 0: programme                                                                                                                                                   $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                        "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_expr3                                     $@2 operande_entier
                                                        ↳ 46: test_instruction                             ↳ 74: '$' '{' ID '}'
                                                              ↳ 49: concatenation "!=" concatenation •

    shift/reduce conflict on token '$':
       49 test_instruction: concatenation "!=" concatenation •
       57 operande: • '$' '*'
      First example: IF "test" concatenation "!=" concatenation • '$' '*' $@2 operande_entier "then" liste_instructions else_part "fi" $end
      Shift derivation
        $accept
        ↳ 0: programme                                                                                                                                                            $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                                 "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_instruction                                             $@2 operande_entier
                                                        ↳ 49: concatenation "!=" concatenation
                                                                                 ↳ 36: concatenation operande
                                                                                                     ↳ 57: • '$' '*'
      Second example: IF "test" concatenation "!=" concatenation • $@2 '$' '{' ID '}' "then" liste_instructions else_part "fi" $end
      Reduce derivation
        $accept
        ↳ 0: programme                                                                                                                                                   $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                        "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_expr3                                     $@2 operande_entier
                                                        ↳ 46: test_instruction                             ↳ 74: '$' '{' ID '}'
                                                              ↳ 49: concatenation "!=" concatenation •

    shift/reduce conflict on token '$':
       49 test_instruction: concatenation "!=" concatenation •
       58 operande: • '$' '?'
      First example: IF "test" concatenation "!=" concatenation • '$' '?' $@2 operande_entier "then" liste_instructions else_part "fi" $end
      Shift derivation
        $accept
        ↳ 0: programme                                                                                                                                                            $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                                 "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_instruction                                             $@2 operande_entier
                                                        ↳ 49: concatenation "!=" concatenation
                                                                                 ↳ 36: concatenation operande
                                                                                                     ↳ 58: • '$' '?'
      Second example: IF "test" concatenation "!=" concatenation • $@2 '$' '{' ID '}' "then" liste_instructions else_part "fi" $end
      Reduce derivation
        $accept
        ↳ 0: programme                                                                                                                                                   $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                        "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_expr3                                     $@2 operande_entier
                                                        ↳ 46: test_instruction                             ↳ 74: '$' '{' ID '}'
                                                              ↳ 49: concatenation "!=" concatenation •

    shift/reduce conflict on token '$':
       49 test_instruction: concatenation "!=" concatenation •
       60 operande: • '$' '(' "expr" somme_entiere ')'
      First example: IF "test" concatenation "!=" concatenation • '$' '(' "expr" somme_entiere ')' $@2 operande_entier "then" liste_instructions else_part "fi" $end
      Shift derivation
        $accept
        ↳ 0: programme                                                                                                                                                                                     $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                                                          "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_instruction                                                                      $@2 operande_entier
                                                        ↳ 49: concatenation "!=" concatenation
                                                                                 ↳ 36: concatenation operande
                                                                                                     ↳ 60: • '$' '(' "expr" somme_entiere ')'
      Second example: IF "test" concatenation "!=" concatenation • $@2 '$' '{' ID '}' "then" liste_instructions else_part "fi" $end
      Reduce derivation
        $accept
        ↳ 0: programme                                                                                                                                                   $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                        "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_expr3                                     $@2 operande_entier
                                                        ↳ 46: test_instruction                             ↳ 74: '$' '{' ID '}'
                                                              ↳ 49: concatenation "!=" concatenation •

    shift/reduce conflict on token '$':
       49 test_instruction: concatenation "!=" concatenation •
       61 operande: • '$' '(' appel_de_fonction ')'
      First example: IF "test" concatenation "!=" concatenation • '$' '(' appel_de_fonction ')' $@2 operande_entier "then" liste_instructions else_part "fi" $end
      Shift derivation
        $accept
        ↳ 0: programme                                                                                                                                                                                  $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                                                       "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_instruction                                                                   $@2 operande_entier
                                                        ↳ 49: concatenation "!=" concatenation
                                                                                 ↳ 36: concatenation operande
                                                                                                     ↳ 61: • '$' '(' appel_de_fonction ')'
      Second example: IF "test" concatenation "!=" concatenation • $@2 '$' '{' ID '}' "then" liste_instructions else_part "fi" $end
      Reduce derivation
        $accept
        ↳ 0: programme                                                                                                                                                   $end
             ↳ 1: liste_instructions
                  ↳ 3: instruction
                       ↳ 7: IF test_bloc                                                                                        "then" liste_instructions else_part "fi"
                               ↳ 38: "test" test_expr
                                            ↳ 40: test_expr2
                                                  ↳ 43: test_expr3                                     $@2 operande_entier
                                                        ↳ 46: test_instruction                             ↳ 74: '$' '{' ID '}'
                                                              ↳ 49: concatenation "!=" concatenation •



State 133

   39 test_expr: test_expr "-o" test_expr2 •  ["then", "do", ')', "-o"]
   41 test_expr2: test_expr2 • "-a" test_expr3

    "-a"  shift, and go to state 90

    $default  reduce using rule 39 (test_expr)


State 134

   41 test_expr2: test_expr2 "-a" test_expr3 •

    $default  reduce using rule 41 (test_expr2)


State 135

   43 test_expr2: test_expr3 $@2 operande_entier •

    $default  reduce using rule 43 (test_expr2)


State 136

   51 test_instruction: operande operateur2 operande •

    $default  reduce using rule 51 (test_instruction)


State 137

   22 else_part: "elif" • test_bloc "then" liste_instructions else_part
   38 test_bloc: • "test" test_expr

    "test"  shift, and go to state 17

    test_bloc  go to state 163


State 138

    2 liste_instructions: • liste_instructions ';' instruction
    3                   | • instruction
    4 instruction: • ID '=' concatenation
    5            | • ID '[' operande_entier ']' '=' concatenation
    6            | • "declare" ID '[' ENTIER ']'
    7            | • IF test_bloc "then" liste_instructions else_part "fi"
    8            | • "for" ID "do" liste_instructions "done"
    9            | • "for" ID "in" liste_operandes "do" liste_instructions "done"
   10            | • "while" test_bloc "do" liste_instructions "done"
   11            | • "until" test_bloc "do" liste_instructions "done"
   12            | • "case" operande "in" liste_cas "esac"
   13            | • "echo" liste_operandes
   14            | • "read" ID
   15            | • "read" ID '[' operande_entier ']'
   16            | • declaration_de_fonction
   17            | • appel_de_fonction
   18            | • "return"
   19            | • "return" operande_entier
   20            | • "exit"
   21            | • "exit" operande_entier
   23 else_part: "else" • liste_instructions
   88 declaration_de_fonction: • ID '(' ')' '{' decl_loc liste_instructions '}'
   91 appel_de_fonction: • ID liste_operandes
   92                  | • ID

    IF         shift, and go to state 1
    ID         shift, and go to state 2
    "declare"  shift, and go to state 3
    "for"      shift, and go to state 4
    "while"    shift, and go to state 5
    "until"    shift, and go to state 6
    "case"     shift, and go to state 7
    "echo"     shift, and go to state 8
    "read"     shift, and go to state 9
    "return"   shift, and go to state 10
    "exit"     shift, and go to state 11

    liste_instructions       go to state 164
    instruction              go to state 14
    declaration_de_fonction  go to state 15
    appel_de_fonction        go to state 16


State 139

    7 instruction: IF test_bloc "then" liste_instructions else_part • "fi"

    "fi"  shift, and go to state 165


State 140

    5 instruction: ID '[' operande_entier ']' '=' • concatenation
   36 concatenation: • concatenation operande
   37              | • operande
   52 operande: • '$' '{' ID '}'
   54         | • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
   55         | • MOT
   56         | • '$' ENTIER
   57         | • '$' '*'
   58         | • '$' '?'
   59         | • CHAINE
   60         | • '$' '(' "expr" somme_entiere ')'
   61         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 25

    concatenation  go to state 166
    operande       go to state 58


State 141

    2 liste_instructions: • liste_instructions ';' instruction
    3                   | • instruction
    4 instruction: • ID '=' concatenation
    5            | • ID '[' operande_entier ']' '=' concatenation
    6            | • "declare" ID '[' ENTIER ']'
    7            | • IF test_bloc "then" liste_instructions else_part "fi"
    8            | • "for" ID "do" liste_instructions "done"
    9            | • "for" ID "in" liste_operandes "do" liste_instructions "done"
   10            | • "while" test_bloc "do" liste_instructions "done"
   11            | • "until" test_bloc "do" liste_instructions "done"
   12            | • "case" operande "in" liste_cas "esac"
   13            | • "echo" liste_operandes
   14            | • "read" ID
   15            | • "read" ID '[' operande_entier ']'
   16            | • declaration_de_fonction
   17            | • appel_de_fonction
   18            | • "return"
   19            | • "return" operande_entier
   20            | • "exit"
   21            | • "exit" operande_entier
   88 declaration_de_fonction: • ID '(' ')' '{' decl_loc liste_instructions '}'
   88                        | ID '(' ')' '{' decl_loc • liste_instructions '}'
   89 decl_loc: decl_loc • "local" ID '=' concatenation ';'
   91 appel_de_fonction: • ID liste_operandes
   92                  | • ID

    IF         shift, and go to state 1
    ID         shift, and go to state 2
    "declare"  shift, and go to state 3
    "for"      shift, and go to state 4
    "while"    shift, and go to state 5
    "until"    shift, and go to state 6
    "case"     shift, and go to state 7
    "echo"     shift, and go to state 8
    "read"     shift, and go to state 9
    "return"   shift, and go to state 10
    "exit"     shift, and go to state 11
    "local"    shift, and go to state 167

    liste_instructions       go to state 168
    instruction              go to state 14
    declaration_de_fonction  go to state 15
    appel_de_fonction        go to state 16


State 142

   60 operande: '$' '(' "expr" somme_entiere • ')'
   70 somme_entiere: somme_entiere • plus_ou_moins produit_entier
   83 plus_ou_moins: • '+'
   84              | • '-'

    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    ')'  shift, and go to state 169

    plus_ou_moins  go to state 121


State 143

   61 operande: '$' '(' appel_de_fonction ')' •

    $default  reduce using rule 61 (operande)


State 144

   54 operande: '$' '{' ID '[' • operande_entier ']' '}' $@3 operande_entier
   74 operande_entier: • '$' '{' ID '}'
   75                | • '$' '{' ID '[' operande_entier ']' '}'
   76                | • '$' ENTIER
   77                | • plus_ou_moins '$' '{' ID '}'
   78                | • plus_ou_moins '$' '{' ID '[' operande_entier ']' '}'
   79                | • plus_ou_moins '$' ENTIER
   80                | • ENTIER
   81                | • plus_ou_moins ENTIER
   82                | • '(' somme_entiere ')'
   83 plus_ou_moins: • '+'
   84              | • '-'

    ENTIER  shift, and go to state 35
    '+'     shift, and go to state 36
    '-'     shift, and go to state 37
    '('     shift, and go to state 38
    '$'     shift, and go to state 39

    operande_entier  go to state 170
    plus_ou_moins    go to state 41


State 145

   52 operande: '$' '{' ID '}' •

    $default  reduce using rule 52 (operande)


State 146

   33 liste_operandes: liste_operandes operande $@1 operande_entier •

    $default  reduce using rule 33 (liste_operandes)


State 147

    6 instruction: "declare" ID '[' ENTIER ']' •

    $default  reduce using rule 6 (instruction)


State 148

    8 instruction: "for" ID "do" liste_instructions "done" •

    $default  reduce using rule 8 (instruction)


State 149

    2 liste_instructions: • liste_instructions ';' instruction
    3                   | • instruction
    4 instruction: • ID '=' concatenation
    5            | • ID '[' operande_entier ']' '=' concatenation
    6            | • "declare" ID '[' ENTIER ']'
    7            | • IF test_bloc "then" liste_instructions else_part "fi"
    8            | • "for" ID "do" liste_instructions "done"
    9            | • "for" ID "in" liste_operandes "do" liste_instructions "done"
    9            | "for" ID "in" liste_operandes "do" • liste_instructions "done"
   10            | • "while" test_bloc "do" liste_instructions "done"
   11            | • "until" test_bloc "do" liste_instructions "done"
   12            | • "case" operande "in" liste_cas "esac"
   13            | • "echo" liste_operandes
   14            | • "read" ID
   15            | • "read" ID '[' operande_entier ']'
   16            | • declaration_de_fonction
   17            | • appel_de_fonction
   18            | • "return"
   19            | • "return" operande_entier
   20            | • "exit"
   21            | • "exit" operande_entier
   88 declaration_de_fonction: • ID '(' ')' '{' decl_loc liste_instructions '}'
   91 appel_de_fonction: • ID liste_operandes
   92                  | • ID

    IF         shift, and go to state 1
    ID         shift, and go to state 2
    "declare"  shift, and go to state 3
    "for"      shift, and go to state 4
    "while"    shift, and go to state 5
    "until"    shift, and go to state 6
    "case"     shift, and go to state 7
    "echo"     shift, and go to state 8
    "read"     shift, and go to state 9
    "return"   shift, and go to state 10
    "exit"     shift, and go to state 11

    liste_instructions       go to state 171
    instruction              go to state 14
    declaration_de_fonction  go to state 15
    appel_de_fonction        go to state 16


State 150

   10 instruction: "while" test_bloc "do" liste_instructions "done" •

    $default  reduce using rule 10 (instruction)


State 151

   11 instruction: "until" test_bloc "do" liste_instructions "done" •

    $default  reduce using rule 11 (instruction)


State 152

   12 instruction: "case" operande "in" liste_cas "esac" •

    $default  reduce using rule 12 (instruction)


State 153

   25 liste_cas: liste_cas filtre • ')' liste_instructions ";;"
   29 filtre: filtre • '|' MOT
   30       | filtre • '|' CHAINE

    ')'  shift, and go to state 172
    '|'  shift, and go to state 155


State 154

    2 liste_instructions: • liste_instructions ';' instruction
    3                   | • instruction
    4 instruction: • ID '=' concatenation
    5            | • ID '[' operande_entier ']' '=' concatenation
    6            | • "declare" ID '[' ENTIER ']'
    7            | • IF test_bloc "then" liste_instructions else_part "fi"
    8            | • "for" ID "do" liste_instructions "done"
    9            | • "for" ID "in" liste_operandes "do" liste_instructions "done"
   10            | • "while" test_bloc "do" liste_instructions "done"
   11            | • "until" test_bloc "do" liste_instructions "done"
   12            | • "case" operande "in" liste_cas "esac"
   13            | • "echo" liste_operandes
   14            | • "read" ID
   15            | • "read" ID '[' operande_entier ']'
   16            | • declaration_de_fonction
   17            | • appel_de_fonction
   18            | • "return"
   19            | • "return" operande_entier
   20            | • "exit"
   21            | • "exit" operande_entier
   26 liste_cas: filtre ')' • liste_instructions ";;"
   88 declaration_de_fonction: • ID '(' ')' '{' decl_loc liste_instructions '}'
   91 appel_de_fonction: • ID liste_operandes
   92                  | • ID

    IF         shift, and go to state 1
    ID         shift, and go to state 2
    "declare"  shift, and go to state 3
    "for"      shift, and go to state 4
    "while"    shift, and go to state 5
    "until"    shift, and go to state 6
    "case"     shift, and go to state 7
    "echo"     shift, and go to state 8
    "read"     shift, and go to state 9
    "return"   shift, and go to state 10
    "exit"     shift, and go to state 11

    liste_instructions       go to state 173
    instruction              go to state 14
    declaration_de_fonction  go to state 15
    appel_de_fonction        go to state 16


State 155

   29 filtre: filtre '|' • MOT
   30       | filtre '|' • CHAINE

    MOT     shift, and go to state 174
    CHAINE  shift, and go to state 175


State 156

   15 instruction: "read" ID '[' operande_entier ']' •

    $default  reduce using rule 15 (instruction)


State 157

   70 somme_entiere: somme_entiere plus_ou_moins produit_entier •  ['+', '-', ')']
   72 produit_entier: produit_entier • fois_div_mod operande_entier
   85 fois_div_mod: • '*'
   86             | • '/'
   87             | • '%'

    '*'  shift, and go to state 122
    '/'  shift, and go to state 123
    '%'  shift, and go to state 124

    $default  reduce using rule 70 (somme_entiere)

    fois_div_mod  go to state 125


State 158

   72 produit_entier: produit_entier fois_div_mod operande_entier •

    $default  reduce using rule 72 (produit_entier)


State 159

   74 operande_entier: • '$' '{' ID '}'
   75                | • '$' '{' ID '[' operande_entier ']' '}'
   75                | '$' '{' ID '[' • operande_entier ']' '}'
   76                | • '$' ENTIER
   77                | • plus_ou_moins '$' '{' ID '}'
   78                | • plus_ou_moins '$' '{' ID '[' operande_entier ']' '}'
   79                | • plus_ou_moins '$' ENTIER
   80                | • ENTIER
   81                | • plus_ou_moins ENTIER
   82                | • '(' somme_entiere ')'
   83 plus_ou_moins: • '+'
   84              | • '-'

    ENTIER  shift, and go to state 35
    '+'     shift, and go to state 36
    '-'     shift, and go to state 37
    '('     shift, and go to state 38
    '$'     shift, and go to state 39

    operande_entier  go to state 176
    plus_ou_moins    go to state 41


State 160

   74 operande_entier: '$' '{' ID '}' •

    $default  reduce using rule 74 (operande_entier)


State 161

   77 operande_entier: plus_ou_moins '$' '{' ID • '}'
   78                | plus_ou_moins '$' '{' ID • '[' operande_entier ']' '}'

    '['  shift, and go to state 177
    '}'  shift, and go to state 178


State 162

   45 test_expr3: '!' '(' test_expr ')' •

    $default  reduce using rule 45 (test_expr3)


State 163

   22 else_part: "elif" test_bloc • "then" liste_instructions else_part

    "then"  shift, and go to state 179


State 164

    2 liste_instructions: liste_instructions • ';' instruction
   23 else_part: "else" liste_instructions •  ["fi"]

    ';'  shift, and go to state 44

    $default  reduce using rule 23 (else_part)


State 165

    7 instruction: IF test_bloc "then" liste_instructions else_part "fi" •

    $default  reduce using rule 7 (instruction)


State 166

    5 instruction: ID '[' operande_entier ']' '=' concatenation •  [$end, ';', "fi", "done", "elif", "else", ";;", '}']
   36 concatenation: concatenation • operande
   52 operande: • '$' '{' ID '}'
   54         | • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
   55         | • MOT
   56         | • '$' ENTIER
   57         | • '$' '*'
   58         | • '$' '?'
   59         | • CHAINE
   60         | • '$' '(' "expr" somme_entiere ')'
   61         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 25

    $default  reduce using rule 5 (instruction)

    operande  go to state 88


State 167

   89 decl_loc: decl_loc "local" • ID '=' concatenation ';'

    ID  shift, and go to state 180


State 168

    2 liste_instructions: liste_instructions • ';' instruction
   88 declaration_de_fonction: ID '(' ')' '{' decl_loc liste_instructions • '}'

    ';'  shift, and go to state 44
    '}'  shift, and go to state 181


State 169

   60 operande: '$' '(' "expr" somme_entiere ')' •

    $default  reduce using rule 60 (operande)


State 170

   54 operande: '$' '{' ID '[' operande_entier • ']' '}' $@3 operande_entier

    ']'  shift, and go to state 182


State 171

    2 liste_instructions: liste_instructions • ';' instruction
    9 instruction: "for" ID "in" liste_operandes "do" liste_instructions • "done"

    ';'     shift, and go to state 44
    "done"  shift, and go to state 183


State 172

    2 liste_instructions: • liste_instructions ';' instruction
    3                   | • instruction
    4 instruction: • ID '=' concatenation
    5            | • ID '[' operande_entier ']' '=' concatenation
    6            | • "declare" ID '[' ENTIER ']'
    7            | • IF test_bloc "then" liste_instructions else_part "fi"
    8            | • "for" ID "do" liste_instructions "done"
    9            | • "for" ID "in" liste_operandes "do" liste_instructions "done"
   10            | • "while" test_bloc "do" liste_instructions "done"
   11            | • "until" test_bloc "do" liste_instructions "done"
   12            | • "case" operande "in" liste_cas "esac"
   13            | • "echo" liste_operandes
   14            | • "read" ID
   15            | • "read" ID '[' operande_entier ']'
   16            | • declaration_de_fonction
   17            | • appel_de_fonction
   18            | • "return"
   19            | • "return" operande_entier
   20            | • "exit"
   21            | • "exit" operande_entier
   25 liste_cas: liste_cas filtre ')' • liste_instructions ";;"
   88 declaration_de_fonction: • ID '(' ')' '{' decl_loc liste_instructions '}'
   91 appel_de_fonction: • ID liste_operandes
   92                  | • ID

    IF         shift, and go to state 1
    ID         shift, and go to state 2
    "declare"  shift, and go to state 3
    "for"      shift, and go to state 4
    "while"    shift, and go to state 5
    "until"    shift, and go to state 6
    "case"     shift, and go to state 7
    "echo"     shift, and go to state 8
    "read"     shift, and go to state 9
    "return"   shift, and go to state 10
    "exit"     shift, and go to state 11

    liste_instructions       go to state 184
    instruction              go to state 14
    declaration_de_fonction  go to state 15
    appel_de_fonction        go to state 16


State 173

    2 liste_instructions: liste_instructions • ';' instruction
   26 liste_cas: filtre ')' liste_instructions • ";;"

    ';'   shift, and go to state 44
    ";;"  shift, and go to state 185


State 174

   29 filtre: filtre '|' MOT •

    $default  reduce using rule 29 (filtre)


State 175

   30 filtre: filtre '|' CHAINE •

    $default  reduce using rule 30 (filtre)


State 176

   75 operande_entier: '$' '{' ID '[' operande_entier • ']' '}'

    ']'  shift, and go to state 186


State 177

   74 operande_entier: • '$' '{' ID '}'
   75                | • '$' '{' ID '[' operande_entier ']' '}'
   76                | • '$' ENTIER
   77                | • plus_ou_moins '$' '{' ID '}'
   78                | • plus_ou_moins '$' '{' ID '[' operande_entier ']' '}'
   78                | plus_ou_moins '$' '{' ID '[' • operande_entier ']' '}'
   79                | • plus_ou_moins '$' ENTIER
   80                | • ENTIER
   81                | • plus_ou_moins ENTIER
   82                | • '(' somme_entiere ')'
   83 plus_ou_moins: • '+'
   84              | • '-'

    ENTIER  shift, and go to state 35
    '+'     shift, and go to state 36
    '-'     shift, and go to state 37
    '('     shift, and go to state 38
    '$'     shift, and go to state 39

    operande_entier  go to state 187
    plus_ou_moins    go to state 41


State 178

   77 operande_entier: plus_ou_moins '$' '{' ID '}' •

    $default  reduce using rule 77 (operande_entier)


State 179

    2 liste_instructions: • liste_instructions ';' instruction
    3                   | • instruction
    4 instruction: • ID '=' concatenation
    5            | • ID '[' operande_entier ']' '=' concatenation
    6            | • "declare" ID '[' ENTIER ']'
    7            | • IF test_bloc "then" liste_instructions else_part "fi"
    8            | • "for" ID "do" liste_instructions "done"
    9            | • "for" ID "in" liste_operandes "do" liste_instructions "done"
   10            | • "while" test_bloc "do" liste_instructions "done"
   11            | • "until" test_bloc "do" liste_instructions "done"
   12            | • "case" operande "in" liste_cas "esac"
   13            | • "echo" liste_operandes
   14            | • "read" ID
   15            | • "read" ID '[' operande_entier ']'
   16            | • declaration_de_fonction
   17            | • appel_de_fonction
   18            | • "return"
   19            | • "return" operande_entier
   20            | • "exit"
   21            | • "exit" operande_entier
   22 else_part: "elif" test_bloc "then" • liste_instructions else_part
   88 declaration_de_fonction: • ID '(' ')' '{' decl_loc liste_instructions '}'
   91 appel_de_fonction: • ID liste_operandes
   92                  | • ID

    IF         shift, and go to state 1
    ID         shift, and go to state 2
    "declare"  shift, and go to state 3
    "for"      shift, and go to state 4
    "while"    shift, and go to state 5
    "until"    shift, and go to state 6
    "case"     shift, and go to state 7
    "echo"     shift, and go to state 8
    "read"     shift, and go to state 9
    "return"   shift, and go to state 10
    "exit"     shift, and go to state 11

    liste_instructions       go to state 188
    instruction              go to state 14
    declaration_de_fonction  go to state 15
    appel_de_fonction        go to state 16


State 180

   89 decl_loc: decl_loc "local" ID • '=' concatenation ';'

    '='  shift, and go to state 189


State 181

   88 declaration_de_fonction: ID '(' ')' '{' decl_loc liste_instructions '}' •

    $default  reduce using rule 88 (declaration_de_fonction)


State 182

   54 operande: '$' '{' ID '[' operande_entier ']' • '}' $@3 operande_entier

    '}'  shift, and go to state 190


State 183

    9 instruction: "for" ID "in" liste_operandes "do" liste_instructions "done" •

    $default  reduce using rule 9 (instruction)


State 184

    2 liste_instructions: liste_instructions • ';' instruction
   25 liste_cas: liste_cas filtre ')' liste_instructions • ";;"

    ';'   shift, and go to state 44
    ";;"  shift, and go to state 191


State 185

   26 liste_cas: filtre ')' liste_instructions ";;" •

    $default  reduce using rule 26 (liste_cas)


State 186

   75 operande_entier: '$' '{' ID '[' operande_entier ']' • '}'

    '}'  shift, and go to state 192


State 187

   78 operande_entier: plus_ou_moins '$' '{' ID '[' operande_entier • ']' '}'

    ']'  shift, and go to state 193


State 188

    2 liste_instructions: liste_instructions • ';' instruction
   22 else_part: • "elif" test_bloc "then" liste_instructions else_part
   22          | "elif" test_bloc "then" liste_instructions • else_part
   23          | • "else" liste_instructions
   24          | ε •  ["fi"]

    ';'     shift, and go to state 44
    "elif"  shift, and go to state 137
    "else"  shift, and go to state 138

    $default  reduce using rule 24 (else_part)

    else_part  go to state 194


State 189

   36 concatenation: • concatenation operande
   37              | • operande
   52 operande: • '$' '{' ID '}'
   54         | • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
   55         | • MOT
   56         | • '$' ENTIER
   57         | • '$' '*'
   58         | • '$' '?'
   59         | • CHAINE
   60         | • '$' '(' "expr" somme_entiere ')'
   61         | • '$' '(' appel_de_fonction ')'
   89 decl_loc: decl_loc "local" ID '=' • concatenation ';'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 25

    concatenation  go to state 195
    operande       go to state 58


State 190

   53 $@3: ε •
   54 operande: '$' '{' ID '[' operande_entier ']' '}' • $@3 operande_entier

    $default  reduce using rule 53 ($@3)

    $@3  go to state 196


State 191

   25 liste_cas: liste_cas filtre ')' liste_instructions ";;" •

    $default  reduce using rule 25 (liste_cas)


State 192

   75 operande_entier: '$' '{' ID '[' operande_entier ']' '}' •

    $default  reduce using rule 75 (operande_entier)


State 193

   78 operande_entier: plus_ou_moins '$' '{' ID '[' operande_entier ']' • '}'

    '}'  shift, and go to state 197


State 194

   22 else_part: "elif" test_bloc "then" liste_instructions else_part •

    $default  reduce using rule 22 (else_part)


State 195

   36 concatenation: concatenation • operande
   52 operande: • '$' '{' ID '}'
   54         | • '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier
   55         | • MOT
   56         | • '$' ENTIER
   57         | • '$' '*'
   58         | • '$' '?'
   59         | • CHAINE
   60         | • '$' '(' "expr" somme_entiere ')'
   61         | • '$' '(' appel_de_fonction ')'
   89 decl_loc: decl_loc "local" ID '=' concatenation • ';'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    ';'     shift, and go to state 198
    '$'     shift, and go to state 25

    operande  go to state 88


State 196

   54 operande: '$' '{' ID '[' operande_entier ']' '}' $@3 • operande_entier
   74 operande_entier: • '$' '{' ID '}'
   75                | • '$' '{' ID '[' operande_entier ']' '}'
   76                | • '$' ENTIER
   77                | • plus_ou_moins '$' '{' ID '}'
   78                | • plus_ou_moins '$' '{' ID '[' operande_entier ']' '}'
   79                | • plus_ou_moins '$' ENTIER
   80                | • ENTIER
   81                | • plus_ou_moins ENTIER
   82                | • '(' somme_entiere ')'
   83 plus_ou_moins: • '+'
   84              | • '-'

    ENTIER  shift, and go to state 35
    '+'     shift, and go to state 36
    '-'     shift, and go to state 37
    '('     shift, and go to state 38
    '$'     shift, and go to state 39

    operande_entier  go to state 199
    plus_ou_moins    go to state 41


State 197

   78 operande_entier: plus_ou_moins '$' '{' ID '[' operande_entier ']' '}' •

    $default  reduce using rule 78 (operande_entier)


State 198

   89 decl_loc: decl_loc "local" ID '=' concatenation ';' •

    $default  reduce using rule 89 (decl_loc)


State 199

   54 operande: '$' '{' ID '[' operande_entier ']' '}' $@3 operande_entier •

    $default  reduce using rule 54 (operande)
