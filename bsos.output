Terminals unused in grammar

    TEST
    EXPR
    LOCAL
    DECLARE
    THEN
    ELIF
    ELSE
    FI
    FOR
    WHILE
    CASE
    ESAC
    IN
    DO
    DONE
    READ
    ECHO
    RETURN
    EXIT
    COMMENT
    UMOINS


Grammar

    0 $accept: programme $end

    1 programme: liste_instructions

    2 liste_instructions: liste_instructions ';' instruction
    3                   | instruction

    4 instruction: ID '=' concatenation
    5            | ID '[' operande_entier ']' '=' concatenation
    6            | "declare" ID '[' ENTIER ']'
    7            | IF test_bloc "then" liste_instructions else_part "fi"
    8            | "for" ID "do" liste_instructions "done"
    9            | "for" ID "in" liste_operandes "do" liste_instructions "done"
   10            | "while" test_bloc "do" liste_instructions "done"
   11            | "until" test_bloc "do" liste_instructions "done"
   12            | "case" operande "in" liste_cas "esac"
   13            | "echo" liste_operandes
   14            | "read" ID
   15            | "read" ID '[' operande_entier ']'
   16            | declaration_de_fonction
   17            | appel_de_fonction
   18            | "return"
   19            | "return" operande_entier
   20            | "exit"
   21            | "exit" operande_entier

   22 else_part: "elif" test_bloc "then" liste_instructions else_part
   23          | "else" liste_instructions
   24          | ε

   25 liste_cas: liste_cas filtre ')' liste_instructions ';' ';'
   26          | filtre ')' liste_instructions ';' ';'

   27 filtre: MOT
   28       | CHAINE
   29       | filtre '|' MOT
   30       | filtre '|' CHAINE
   31       | '*'

   32 liste_operandes: liste_operandes operande
   33                | operande
   34                | '$' '{' ID '[' '*' ']' '}'

   35 concatenation: concatenation operande
   36              | operande

   37 test_bloc: "test" test_expr

   38 test_expr: test_expr "-o" test_expr2
   39          | test_expr2

   40 test_expr2: test_expr2 "-a" test_expr3
   41           | test_expr3

   42 test_expr3: '(' test_expr ')'
   43           | '!' '(' test_expr ')'
   44           | test_instruction
   45           | '!' test_instruction

   46 test_instruction: concatenation '=' concatenation
   47                 | concatenation "!=" concatenation
   48                 | operateur1 concatenation
   49                 | operande operateur2 operande

   50 operande: '$' '{' ID '}'
   51         | '$' '{' ID '[' operande_entier ']' '}'
   52         | MOT
   53         | '$' ENTIER
   54         | '$' '*'
   55         | '$' '?'
   56         | CHAINE
   57         | '$' '(' "expr" somme_entiere ')'
   58         | '$' '(' appel_de_fonction ')'

   59 operateur1: "-n"
   60           | "-z"

   61 operateur2: "-eq"
   62           | "-ne"
   63           | "-gt"
   64           | "-ge"
   65           | "-lt"
   66           | "-le"

   67 somme_entiere: somme_entiere plus_ou_moins produit_entier
   68              | produit_entier

   69 produit_entier: produit_entier fois_div_mod operande_entier
   70               | operande_entier

   71 operande_entier: '$' '{' ID '}'
   72                | '$' '{' ID '[' operande_entier ']' '}'
   73                | '$' ENTIER
   74                | plus_ou_moins '$' '{' ID '}'
   75                | plus_ou_moins '$' '{' ID '[' operande_entier ']' '}'
   76                | plus_ou_moins '$' ENTIER
   77                | ENTIER
   78                | plus_ou_moins ENTIER
   79                | '(' somme_entiere ')'

   80 plus_ou_moins: '+'
   81              | '-'

   82 fois_div_mod: '*'
   83             | '/'
   84             | '%'

   85 declaration_de_fonction: ID '(' ')' '{' decl_loc liste_instructions '}'

   86 decl_loc: decl_loc "local" ID '=' concatenation ';'
   87         | ε

   88 appel_de_fonction: ID liste_operandes
   89                  | ID


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 43 45
    '$' (36) 34 50 51 53 54 55 57 58 71 72 73 74 75 76
    '%' (37) 84
    '(' (40) 42 43 57 58 79 85
    ')' (41) 25 26 42 43 57 58 79 85
    '*' (42) 31 34 54 82
    '+' (43) 80
    '-' (45) 81
    '/' (47) 83
    ';' (59) 2 25 26 86
    '=' (61) 4 5 46 86
    '?' (63) 55
    '[' (91) 5 6 15 34 51 72 75
    ']' (93) 5 6 15 34 51 72 75
    '{' (123) 34 50 51 71 72 74 75 85
    '|' (124) 29 30
    '}' (125) 34 50 51 71 72 74 75 85
    error (256)
    TEST (258)
    EXPR (259)
    LOCAL (260)
    DECLARE (261)
    IF (262) 7
    THEN (263)
    ELIF (264)
    ELSE (265)
    FI (266)
    FOR (267)
    WHILE (268)
    CASE (269)
    ESAC (270)
    IN (271)
    DO (272)
    DONE (273)
    READ (274)
    ECHO (275)
    RETURN (276)
    EXIT (277)
    COMMENT (278)
    ID (279) 4 5 6 8 9 14 15 34 50 51 71 72 74 75 85 86 88 89
    MOT (280) 27 29 52
    CHAINE (281) 28 30 56
    ENTIER (282) 6 53 73 76 77 78
    UMOINS (283)
    "declare" (284) 6
    "then" (285) 7 22
    "fi" (286) 7
    "for" (287) 8 9
    "do" (288) 8 9 10 11
    "done" (289) 8 9 10 11
    "in" (290) 9 12
    "while" (291) 10
    "until" (292) 11
    "case" (293) 12
    "esac" (294) 12
    "echo" (295) 13
    "read" (296) 14 15
    "return" (297) 18 19
    "exit" (298) 20 21
    "elif" (299) 22
    "else" (300) 23
    "test" (301) 37
    "-o" (302) 38
    "-a" (303) 40
    "!=" (304) 47
    "expr" (305) 57
    "-n" (306) 59
    "-z" (307) 60
    "-eq" (308) 61
    "-ne" (309) 62
    "-gt" (310) 63
    "-ge" (311) 64
    "-lt" (312) 65
    "-le" (313) 66
    "local" (314) 86


Nonterminals, with rules where they appear

    $accept (77)
        on left: 0
    programme (78)
        on left: 1
        on right: 0
    liste_instructions (79)
        on left: 2 3
        on right: 1 2 7 8 9 10 11 22 23 25 26 85
    instruction (80)
        on left: 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21
        on right: 2 3
    else_part (81)
        on left: 22 23 24
        on right: 7 22
    liste_cas (82)
        on left: 25 26
        on right: 12 25
    filtre (83)
        on left: 27 28 29 30 31
        on right: 25 26 29 30
    liste_operandes (84)
        on left: 32 33 34
        on right: 9 13 32 88
    concatenation (85)
        on left: 35 36
        on right: 4 5 35 46 47 48 86
    test_bloc (86)
        on left: 37
        on right: 7 10 11 22
    test_expr (87)
        on left: 38 39
        on right: 37 38 42 43
    test_expr2 (88)
        on left: 40 41
        on right: 38 39 40
    test_expr3 (89)
        on left: 42 43 44 45
        on right: 40 41
    test_instruction (90)
        on left: 46 47 48 49
        on right: 44 45
    operande (91)
        on left: 50 51 52 53 54 55 56 57 58
        on right: 12 32 33 35 36 49
    operateur1 (92)
        on left: 59 60
        on right: 48
    operateur2 (93)
        on left: 61 62 63 64 65 66
        on right: 49
    somme_entiere (94)
        on left: 67 68
        on right: 57 67 79
    produit_entier (95)
        on left: 69 70
        on right: 67 68 69
    operande_entier (96)
        on left: 71 72 73 74 75 76 77 78 79
        on right: 5 15 19 21 51 69 70 72 75
    plus_ou_moins (97)
        on left: 80 81
        on right: 67 74 75 76 78
    fois_div_mod (98)
        on left: 82 83 84
        on right: 69
    declaration_de_fonction (99)
        on left: 85
        on right: 16
    decl_loc (100)
        on left: 86 87
        on right: 85 86
    appel_de_fonction (101)
        on left: 88 89
        on right: 17 58


State 0

    0 $accept: • programme $end
    1 programme: • liste_instructions
    2 liste_instructions: • liste_instructions ';' instruction
    3                   | • instruction
    4 instruction: • ID '=' concatenation
    5            | • ID '[' operande_entier ']' '=' concatenation
    6            | • "declare" ID '[' ENTIER ']'
    7            | • IF test_bloc "then" liste_instructions else_part "fi"
    8            | • "for" ID "do" liste_instructions "done"
    9            | • "for" ID "in" liste_operandes "do" liste_instructions "done"
   10            | • "while" test_bloc "do" liste_instructions "done"
   11            | • "until" test_bloc "do" liste_instructions "done"
   12            | • "case" operande "in" liste_cas "esac"
   13            | • "echo" liste_operandes
   14            | • "read" ID
   15            | • "read" ID '[' operande_entier ']'
   16            | • declaration_de_fonction
   17            | • appel_de_fonction
   18            | • "return"
   19            | • "return" operande_entier
   20            | • "exit"
   21            | • "exit" operande_entier
   85 declaration_de_fonction: • ID '(' ')' '{' decl_loc liste_instructions '}'
   88 appel_de_fonction: • ID liste_operandes
   89                  | • ID

    IF         shift, and go to state 1
    ID         shift, and go to state 2
    "declare"  shift, and go to state 3
    "for"      shift, and go to state 4
    "while"    shift, and go to state 5
    "until"    shift, and go to state 6
    "case"     shift, and go to state 7
    "echo"     shift, and go to state 8
    "read"     shift, and go to state 9
    "return"   shift, and go to state 10
    "exit"     shift, and go to state 11

    programme                go to state 12
    liste_instructions       go to state 13
    instruction              go to state 14
    declaration_de_fonction  go to state 15
    appel_de_fonction        go to state 16


State 1

    7 instruction: IF • test_bloc "then" liste_instructions else_part "fi"
   37 test_bloc: • "test" test_expr

    "test"  shift, and go to state 17

    test_bloc  go to state 18


State 2

    4 instruction: ID • '=' concatenation
    5            | ID • '[' operande_entier ']' '=' concatenation
   32 liste_operandes: • liste_operandes operande
   33                | • operande
   34                | • '$' '{' ID '[' '*' ']' '}'
   50 operande: • '$' '{' ID '}'
   51         | • '$' '{' ID '[' operande_entier ']' '}'
   52         | • MOT
   53         | • '$' ENTIER
   54         | • '$' '*'
   55         | • '$' '?'
   56         | • CHAINE
   57         | • '$' '(' "expr" somme_entiere ')'
   58         | • '$' '(' appel_de_fonction ')'
   85 declaration_de_fonction: ID • '(' ')' '{' decl_loc liste_instructions '}'
   88 appel_de_fonction: ID • liste_operandes
   89                  | ID •  [$end, ';', "fi", "done", "elif", "else", '}']

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '='     shift, and go to state 21
    '['     shift, and go to state 22
    '$'     shift, and go to state 23
    '('     shift, and go to state 24

    $default  reduce using rule 89 (appel_de_fonction)

    liste_operandes  go to state 25
    operande         go to state 26


State 3

    6 instruction: "declare" • ID '[' ENTIER ']'

    ID  shift, and go to state 27


State 4

    8 instruction: "for" • ID "do" liste_instructions "done"
    9            | "for" • ID "in" liste_operandes "do" liste_instructions "done"

    ID  shift, and go to state 28


State 5

   10 instruction: "while" • test_bloc "do" liste_instructions "done"
   37 test_bloc: • "test" test_expr

    "test"  shift, and go to state 17

    test_bloc  go to state 29


State 6

   11 instruction: "until" • test_bloc "do" liste_instructions "done"
   37 test_bloc: • "test" test_expr

    "test"  shift, and go to state 17

    test_bloc  go to state 30


State 7

   12 instruction: "case" • operande "in" liste_cas "esac"
   50 operande: • '$' '{' ID '}'
   51         | • '$' '{' ID '[' operande_entier ']' '}'
   52         | • MOT
   53         | • '$' ENTIER
   54         | • '$' '*'
   55         | • '$' '?'
   56         | • CHAINE
   57         | • '$' '(' "expr" somme_entiere ')'
   58         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 31

    operande  go to state 32


State 8

   13 instruction: "echo" • liste_operandes
   32 liste_operandes: • liste_operandes operande
   33                | • operande
   34                | • '$' '{' ID '[' '*' ']' '}'
   50 operande: • '$' '{' ID '}'
   51         | • '$' '{' ID '[' operande_entier ']' '}'
   52         | • MOT
   53         | • '$' ENTIER
   54         | • '$' '*'
   55         | • '$' '?'
   56         | • CHAINE
   57         | • '$' '(' "expr" somme_entiere ')'
   58         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 23

    liste_operandes  go to state 33
    operande         go to state 26


State 9

   14 instruction: "read" • ID
   15            | "read" • ID '[' operande_entier ']'

    ID  shift, and go to state 34


State 10

   18 instruction: "return" •  [$end, ';', "fi", "done", "elif", "else", '}']
   19            | "return" • operande_entier
   71 operande_entier: • '$' '{' ID '}'
   72                | • '$' '{' ID '[' operande_entier ']' '}'
   73                | • '$' ENTIER
   74                | • plus_ou_moins '$' '{' ID '}'
   75                | • plus_ou_moins '$' '{' ID '[' operande_entier ']' '}'
   76                | • plus_ou_moins '$' ENTIER
   77                | • ENTIER
   78                | • plus_ou_moins ENTIER
   79                | • '(' somme_entiere ')'
   80 plus_ou_moins: • '+'
   81              | • '-'

    ENTIER  shift, and go to state 35
    '+'     shift, and go to state 36
    '-'     shift, and go to state 37
    '$'     shift, and go to state 38
    '('     shift, and go to state 39

    $default  reduce using rule 18 (instruction)

    operande_entier  go to state 40
    plus_ou_moins    go to state 41


State 11

   20 instruction: "exit" •  [$end, ';', "fi", "done", "elif", "else", '}']
   21            | "exit" • operande_entier
   71 operande_entier: • '$' '{' ID '}'
   72                | • '$' '{' ID '[' operande_entier ']' '}'
   73                | • '$' ENTIER
   74                | • plus_ou_moins '$' '{' ID '}'
   75                | • plus_ou_moins '$' '{' ID '[' operande_entier ']' '}'
   76                | • plus_ou_moins '$' ENTIER
   77                | • ENTIER
   78                | • plus_ou_moins ENTIER
   79                | • '(' somme_entiere ')'
   80 plus_ou_moins: • '+'
   81              | • '-'

    ENTIER  shift, and go to state 35
    '+'     shift, and go to state 36
    '-'     shift, and go to state 37
    '$'     shift, and go to state 38
    '('     shift, and go to state 39

    $default  reduce using rule 20 (instruction)

    operande_entier  go to state 42
    plus_ou_moins    go to state 41


State 12

    0 $accept: programme • $end

    $end  shift, and go to state 43


State 13

    1 programme: liste_instructions •  [$end]
    2 liste_instructions: liste_instructions • ';' instruction

    ';'  shift, and go to state 44

    $default  reduce using rule 1 (programme)


State 14

    3 liste_instructions: instruction •

    $default  reduce using rule 3 (liste_instructions)


State 15

   16 instruction: declaration_de_fonction •

    $default  reduce using rule 16 (instruction)


State 16

   17 instruction: appel_de_fonction •

    $default  reduce using rule 17 (instruction)


State 17

   35 concatenation: • concatenation operande
   36              | • operande
   37 test_bloc: "test" • test_expr
   38 test_expr: • test_expr "-o" test_expr2
   39          | • test_expr2
   40 test_expr2: • test_expr2 "-a" test_expr3
   41           | • test_expr3
   42 test_expr3: • '(' test_expr ')'
   43           | • '!' '(' test_expr ')'
   44           | • test_instruction
   45           | • '!' test_instruction
   46 test_instruction: • concatenation '=' concatenation
   47                 | • concatenation "!=" concatenation
   48                 | • operateur1 concatenation
   49                 | • operande operateur2 operande
   50 operande: • '$' '{' ID '}'
   51         | • '$' '{' ID '[' operande_entier ']' '}'
   52         | • MOT
   53         | • '$' ENTIER
   54         | • '$' '*'
   55         | • '$' '?'
   56         | • CHAINE
   57         | • '$' '(' "expr" somme_entiere ')'
   58         | • '$' '(' appel_de_fonction ')'
   59 operateur1: • "-n"
   60           | • "-z"

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 31
    '('     shift, and go to state 45
    '!'     shift, and go to state 46
    "-n"    shift, and go to state 47
    "-z"    shift, and go to state 48

    concatenation     go to state 49
    test_expr         go to state 50
    test_expr2        go to state 51
    test_expr3        go to state 52
    test_instruction  go to state 53
    operande          go to state 54
    operateur1        go to state 55


State 18

    7 instruction: IF test_bloc • "then" liste_instructions else_part "fi"

    "then"  shift, and go to state 56


State 19

   52 operande: MOT •

    $default  reduce using rule 52 (operande)


State 20

   56 operande: CHAINE •

    $default  reduce using rule 56 (operande)


State 21

    4 instruction: ID '=' • concatenation
   35 concatenation: • concatenation operande
   36              | • operande
   50 operande: • '$' '{' ID '}'
   51         | • '$' '{' ID '[' operande_entier ']' '}'
   52         | • MOT
   53         | • '$' ENTIER
   54         | • '$' '*'
   55         | • '$' '?'
   56         | • CHAINE
   57         | • '$' '(' "expr" somme_entiere ')'
   58         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 31

    concatenation  go to state 57
    operande       go to state 58


State 22

    5 instruction: ID '[' • operande_entier ']' '=' concatenation
   71 operande_entier: • '$' '{' ID '}'
   72                | • '$' '{' ID '[' operande_entier ']' '}'
   73                | • '$' ENTIER
   74                | • plus_ou_moins '$' '{' ID '}'
   75                | • plus_ou_moins '$' '{' ID '[' operande_entier ']' '}'
   76                | • plus_ou_moins '$' ENTIER
   77                | • ENTIER
   78                | • plus_ou_moins ENTIER
   79                | • '(' somme_entiere ')'
   80 plus_ou_moins: • '+'
   81              | • '-'

    ENTIER  shift, and go to state 35
    '+'     shift, and go to state 36
    '-'     shift, and go to state 37
    '$'     shift, and go to state 38
    '('     shift, and go to state 39

    operande_entier  go to state 59
    plus_ou_moins    go to state 41


State 23

   34 liste_operandes: '$' • '{' ID '[' '*' ']' '}'
   50 operande: '$' • '{' ID '}'
   51         | '$' • '{' ID '[' operande_entier ']' '}'
   53         | '$' • ENTIER
   54         | '$' • '*'
   55         | '$' • '?'
   57         | '$' • '(' "expr" somme_entiere ')'
   58         | '$' • '(' appel_de_fonction ')'

    ENTIER  shift, and go to state 60
    '*'     shift, and go to state 61
    '{'     shift, and go to state 62
    '('     shift, and go to state 63
    '?'     shift, and go to state 64


State 24

   85 declaration_de_fonction: ID '(' • ')' '{' decl_loc liste_instructions '}'

    ')'  shift, and go to state 65


State 25

   32 liste_operandes: liste_operandes • operande
   50 operande: • '$' '{' ID '}'
   51         | • '$' '{' ID '[' operande_entier ']' '}'
   52         | • MOT
   53         | • '$' ENTIER
   54         | • '$' '*'
   55         | • '$' '?'
   56         | • CHAINE
   57         | • '$' '(' "expr" somme_entiere ')'
   58         | • '$' '(' appel_de_fonction ')'
   88 appel_de_fonction: ID liste_operandes •  [$end, ';', "fi", "done", "elif", "else", ')', '}']

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 31

    $default  reduce using rule 88 (appel_de_fonction)

    operande  go to state 66


State 26

   33 liste_operandes: operande •

    $default  reduce using rule 33 (liste_operandes)


State 27

    6 instruction: "declare" ID • '[' ENTIER ']'

    '['  shift, and go to state 67


State 28

    8 instruction: "for" ID • "do" liste_instructions "done"
    9            | "for" ID • "in" liste_operandes "do" liste_instructions "done"

    "do"  shift, and go to state 68
    "in"  shift, and go to state 69


State 29

   10 instruction: "while" test_bloc • "do" liste_instructions "done"

    "do"  shift, and go to state 70


State 30

   11 instruction: "until" test_bloc • "do" liste_instructions "done"

    "do"  shift, and go to state 71


State 31

   50 operande: '$' • '{' ID '}'
   51         | '$' • '{' ID '[' operande_entier ']' '}'
   53         | '$' • ENTIER
   54         | '$' • '*'
   55         | '$' • '?'
   57         | '$' • '(' "expr" somme_entiere ')'
   58         | '$' • '(' appel_de_fonction ')'

    ENTIER  shift, and go to state 60
    '*'     shift, and go to state 61
    '{'     shift, and go to state 72
    '('     shift, and go to state 63
    '?'     shift, and go to state 64


State 32

   12 instruction: "case" operande • "in" liste_cas "esac"

    "in"  shift, and go to state 73


State 33

   13 instruction: "echo" liste_operandes •  [$end, ';', "fi", "done", "elif", "else", '}']
   32 liste_operandes: liste_operandes • operande
   50 operande: • '$' '{' ID '}'
   51         | • '$' '{' ID '[' operande_entier ']' '}'
   52         | • MOT
   53         | • '$' ENTIER
   54         | • '$' '*'
   55         | • '$' '?'
   56         | • CHAINE
   57         | • '$' '(' "expr" somme_entiere ')'
   58         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 31

    $default  reduce using rule 13 (instruction)

    operande  go to state 66


State 34

   14 instruction: "read" ID •  [$end, ';', "fi", "done", "elif", "else", '}']
   15            | "read" ID • '[' operande_entier ']'

    '['  shift, and go to state 74

    $default  reduce using rule 14 (instruction)


State 35

   77 operande_entier: ENTIER •

    $default  reduce using rule 77 (operande_entier)


State 36

   80 plus_ou_moins: '+' •

    $default  reduce using rule 80 (plus_ou_moins)


State 37

   81 plus_ou_moins: '-' •

    $default  reduce using rule 81 (plus_ou_moins)


State 38

   71 operande_entier: '$' • '{' ID '}'
   72                | '$' • '{' ID '[' operande_entier ']' '}'
   73                | '$' • ENTIER

    ENTIER  shift, and go to state 75
    '{'     shift, and go to state 76


State 39

   67 somme_entiere: • somme_entiere plus_ou_moins produit_entier
   68              | • produit_entier
   69 produit_entier: • produit_entier fois_div_mod operande_entier
   70               | • operande_entier
   71 operande_entier: • '$' '{' ID '}'
   72                | • '$' '{' ID '[' operande_entier ']' '}'
   73                | • '$' ENTIER
   74                | • plus_ou_moins '$' '{' ID '}'
   75                | • plus_ou_moins '$' '{' ID '[' operande_entier ']' '}'
   76                | • plus_ou_moins '$' ENTIER
   77                | • ENTIER
   78                | • plus_ou_moins ENTIER
   79                | • '(' somme_entiere ')'
   79                | '(' • somme_entiere ')'
   80 plus_ou_moins: • '+'
   81              | • '-'

    ENTIER  shift, and go to state 35
    '+'     shift, and go to state 36
    '-'     shift, and go to state 37
    '$'     shift, and go to state 38
    '('     shift, and go to state 39

    somme_entiere    go to state 77
    produit_entier   go to state 78
    operande_entier  go to state 79
    plus_ou_moins    go to state 41


State 40

   19 instruction: "return" operande_entier •

    $default  reduce using rule 19 (instruction)


State 41

   74 operande_entier: plus_ou_moins • '$' '{' ID '}'
   75                | plus_ou_moins • '$' '{' ID '[' operande_entier ']' '}'
   76                | plus_ou_moins • '$' ENTIER
   78                | plus_ou_moins • ENTIER

    ENTIER  shift, and go to state 80
    '$'     shift, and go to state 81


State 42

   21 instruction: "exit" operande_entier •

    $default  reduce using rule 21 (instruction)


State 43

    0 $accept: programme $end •

    $default  accept


State 44

    2 liste_instructions: liste_instructions ';' • instruction
    4 instruction: • ID '=' concatenation
    5            | • ID '[' operande_entier ']' '=' concatenation
    6            | • "declare" ID '[' ENTIER ']'
    7            | • IF test_bloc "then" liste_instructions else_part "fi"
    8            | • "for" ID "do" liste_instructions "done"
    9            | • "for" ID "in" liste_operandes "do" liste_instructions "done"
   10            | • "while" test_bloc "do" liste_instructions "done"
   11            | • "until" test_bloc "do" liste_instructions "done"
   12            | • "case" operande "in" liste_cas "esac"
   13            | • "echo" liste_operandes
   14            | • "read" ID
   15            | • "read" ID '[' operande_entier ']'
   16            | • declaration_de_fonction
   17            | • appel_de_fonction
   18            | • "return"
   19            | • "return" operande_entier
   20            | • "exit"
   21            | • "exit" operande_entier
   85 declaration_de_fonction: • ID '(' ')' '{' decl_loc liste_instructions '}'
   88 appel_de_fonction: • ID liste_operandes
   89                  | • ID

    IF         shift, and go to state 1
    ID         shift, and go to state 2
    "declare"  shift, and go to state 3
    "for"      shift, and go to state 4
    "while"    shift, and go to state 5
    "until"    shift, and go to state 6
    "case"     shift, and go to state 7
    "echo"     shift, and go to state 8
    "read"     shift, and go to state 9
    "return"   shift, and go to state 10
    "exit"     shift, and go to state 11

    instruction              go to state 82
    declaration_de_fonction  go to state 15
    appel_de_fonction        go to state 16


State 45

   35 concatenation: • concatenation operande
   36              | • operande
   38 test_expr: • test_expr "-o" test_expr2
   39          | • test_expr2
   40 test_expr2: • test_expr2 "-a" test_expr3
   41           | • test_expr3
   42 test_expr3: • '(' test_expr ')'
   42           | '(' • test_expr ')'
   43           | • '!' '(' test_expr ')'
   44           | • test_instruction
   45           | • '!' test_instruction
   46 test_instruction: • concatenation '=' concatenation
   47                 | • concatenation "!=" concatenation
   48                 | • operateur1 concatenation
   49                 | • operande operateur2 operande
   50 operande: • '$' '{' ID '}'
   51         | • '$' '{' ID '[' operande_entier ']' '}'
   52         | • MOT
   53         | • '$' ENTIER
   54         | • '$' '*'
   55         | • '$' '?'
   56         | • CHAINE
   57         | • '$' '(' "expr" somme_entiere ')'
   58         | • '$' '(' appel_de_fonction ')'
   59 operateur1: • "-n"
   60           | • "-z"

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 31
    '('     shift, and go to state 45
    '!'     shift, and go to state 46
    "-n"    shift, and go to state 47
    "-z"    shift, and go to state 48

    concatenation     go to state 49
    test_expr         go to state 83
    test_expr2        go to state 51
    test_expr3        go to state 52
    test_instruction  go to state 53
    operande          go to state 54
    operateur1        go to state 55


State 46

   35 concatenation: • concatenation operande
   36              | • operande
   43 test_expr3: '!' • '(' test_expr ')'
   45           | '!' • test_instruction
   46 test_instruction: • concatenation '=' concatenation
   47                 | • concatenation "!=" concatenation
   48                 | • operateur1 concatenation
   49                 | • operande operateur2 operande
   50 operande: • '$' '{' ID '}'
   51         | • '$' '{' ID '[' operande_entier ']' '}'
   52         | • MOT
   53         | • '$' ENTIER
   54         | • '$' '*'
   55         | • '$' '?'
   56         | • CHAINE
   57         | • '$' '(' "expr" somme_entiere ')'
   58         | • '$' '(' appel_de_fonction ')'
   59 operateur1: • "-n"
   60           | • "-z"

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 31
    '('     shift, and go to state 84
    "-n"    shift, and go to state 47
    "-z"    shift, and go to state 48

    concatenation     go to state 49
    test_instruction  go to state 85
    operande          go to state 54
    operateur1        go to state 55


State 47

   59 operateur1: "-n" •

    $default  reduce using rule 59 (operateur1)


State 48

   60 operateur1: "-z" •

    $default  reduce using rule 60 (operateur1)


State 49

   35 concatenation: concatenation • operande
   46 test_instruction: concatenation • '=' concatenation
   47                 | concatenation • "!=" concatenation
   50 operande: • '$' '{' ID '}'
   51         | • '$' '{' ID '[' operande_entier ']' '}'
   52         | • MOT
   53         | • '$' ENTIER
   54         | • '$' '*'
   55         | • '$' '?'
   56         | • CHAINE
   57         | • '$' '(' "expr" somme_entiere ')'
   58         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '='     shift, and go to state 86
    '$'     shift, and go to state 31
    "!="    shift, and go to state 87

    operande  go to state 88


State 50

   37 test_bloc: "test" test_expr •  ["then", "do"]
   38 test_expr: test_expr • "-o" test_expr2

    "-o"  shift, and go to state 89

    $default  reduce using rule 37 (test_bloc)


State 51

   39 test_expr: test_expr2 •  ["then", "do", ')', "-o"]
   40 test_expr2: test_expr2 • "-a" test_expr3

    "-a"  shift, and go to state 90

    $default  reduce using rule 39 (test_expr)


State 52

   41 test_expr2: test_expr3 •

    $default  reduce using rule 41 (test_expr2)


State 53

   44 test_expr3: test_instruction •

    $default  reduce using rule 44 (test_expr3)


State 54

   36 concatenation: operande •  [MOT, CHAINE, '=', '$', "!="]
   49 test_instruction: operande • operateur2 operande
   61 operateur2: • "-eq"
   62           | • "-ne"
   63           | • "-gt"
   64           | • "-ge"
   65           | • "-lt"
   66           | • "-le"

    "-eq"  shift, and go to state 91
    "-ne"  shift, and go to state 92
    "-gt"  shift, and go to state 93
    "-ge"  shift, and go to state 94
    "-lt"  shift, and go to state 95
    "-le"  shift, and go to state 96

    $default  reduce using rule 36 (concatenation)

    operateur2  go to state 97


State 55

   35 concatenation: • concatenation operande
   36              | • operande
   48 test_instruction: operateur1 • concatenation
   50 operande: • '$' '{' ID '}'
   51         | • '$' '{' ID '[' operande_entier ']' '}'
   52         | • MOT
   53         | • '$' ENTIER
   54         | • '$' '*'
   55         | • '$' '?'
   56         | • CHAINE
   57         | • '$' '(' "expr" somme_entiere ')'
   58         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 31

    concatenation  go to state 98
    operande       go to state 58


State 56

    2 liste_instructions: • liste_instructions ';' instruction
    3                   | • instruction
    4 instruction: • ID '=' concatenation
    5            | • ID '[' operande_entier ']' '=' concatenation
    6            | • "declare" ID '[' ENTIER ']'
    7            | • IF test_bloc "then" liste_instructions else_part "fi"
    7            | IF test_bloc "then" • liste_instructions else_part "fi"
    8            | • "for" ID "do" liste_instructions "done"
    9            | • "for" ID "in" liste_operandes "do" liste_instructions "done"
   10            | • "while" test_bloc "do" liste_instructions "done"
   11            | • "until" test_bloc "do" liste_instructions "done"
   12            | • "case" operande "in" liste_cas "esac"
   13            | • "echo" liste_operandes
   14            | • "read" ID
   15            | • "read" ID '[' operande_entier ']'
   16            | • declaration_de_fonction
   17            | • appel_de_fonction
   18            | • "return"
   19            | • "return" operande_entier
   20            | • "exit"
   21            | • "exit" operande_entier
   85 declaration_de_fonction: • ID '(' ')' '{' decl_loc liste_instructions '}'
   88 appel_de_fonction: • ID liste_operandes
   89                  | • ID

    IF         shift, and go to state 1
    ID         shift, and go to state 2
    "declare"  shift, and go to state 3
    "for"      shift, and go to state 4
    "while"    shift, and go to state 5
    "until"    shift, and go to state 6
    "case"     shift, and go to state 7
    "echo"     shift, and go to state 8
    "read"     shift, and go to state 9
    "return"   shift, and go to state 10
    "exit"     shift, and go to state 11

    liste_instructions       go to state 99
    instruction              go to state 14
    declaration_de_fonction  go to state 15
    appel_de_fonction        go to state 16


State 57

    4 instruction: ID '=' concatenation •  [$end, ';', "fi", "done", "elif", "else", '}']
   35 concatenation: concatenation • operande
   50 operande: • '$' '{' ID '}'
   51         | • '$' '{' ID '[' operande_entier ']' '}'
   52         | • MOT
   53         | • '$' ENTIER
   54         | • '$' '*'
   55         | • '$' '?'
   56         | • CHAINE
   57         | • '$' '(' "expr" somme_entiere ')'
   58         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 31

    $default  reduce using rule 4 (instruction)

    operande  go to state 88


State 58

   36 concatenation: operande •

    $default  reduce using rule 36 (concatenation)


State 59

    5 instruction: ID '[' operande_entier • ']' '=' concatenation

    ']'  shift, and go to state 100


State 60

   53 operande: '$' ENTIER •

    $default  reduce using rule 53 (operande)


State 61

   54 operande: '$' '*' •

    $default  reduce using rule 54 (operande)


State 62

   34 liste_operandes: '$' '{' • ID '[' '*' ']' '}'
   50 operande: '$' '{' • ID '}'
   51         | '$' '{' • ID '[' operande_entier ']' '}'

    ID  shift, and go to state 101


State 63

   57 operande: '$' '(' • "expr" somme_entiere ')'
   58         | '$' '(' • appel_de_fonction ')'
   88 appel_de_fonction: • ID liste_operandes
   89                  | • ID

    ID      shift, and go to state 102
    "expr"  shift, and go to state 103

    appel_de_fonction  go to state 104


State 64

   55 operande: '$' '?' •

    $default  reduce using rule 55 (operande)


State 65

   85 declaration_de_fonction: ID '(' ')' • '{' decl_loc liste_instructions '}'

    '{'  shift, and go to state 105


State 66

   32 liste_operandes: liste_operandes operande •

    $default  reduce using rule 32 (liste_operandes)


State 67

    6 instruction: "declare" ID '[' • ENTIER ']'

    ENTIER  shift, and go to state 106


State 68

    2 liste_instructions: • liste_instructions ';' instruction
    3                   | • instruction
    4 instruction: • ID '=' concatenation
    5            | • ID '[' operande_entier ']' '=' concatenation
    6            | • "declare" ID '[' ENTIER ']'
    7            | • IF test_bloc "then" liste_instructions else_part "fi"
    8            | • "for" ID "do" liste_instructions "done"
    8            | "for" ID "do" • liste_instructions "done"
    9            | • "for" ID "in" liste_operandes "do" liste_instructions "done"
   10            | • "while" test_bloc "do" liste_instructions "done"
   11            | • "until" test_bloc "do" liste_instructions "done"
   12            | • "case" operande "in" liste_cas "esac"
   13            | • "echo" liste_operandes
   14            | • "read" ID
   15            | • "read" ID '[' operande_entier ']'
   16            | • declaration_de_fonction
   17            | • appel_de_fonction
   18            | • "return"
   19            | • "return" operande_entier
   20            | • "exit"
   21            | • "exit" operande_entier
   85 declaration_de_fonction: • ID '(' ')' '{' decl_loc liste_instructions '}'
   88 appel_de_fonction: • ID liste_operandes
   89                  | • ID

    IF         shift, and go to state 1
    ID         shift, and go to state 2
    "declare"  shift, and go to state 3
    "for"      shift, and go to state 4
    "while"    shift, and go to state 5
    "until"    shift, and go to state 6
    "case"     shift, and go to state 7
    "echo"     shift, and go to state 8
    "read"     shift, and go to state 9
    "return"   shift, and go to state 10
    "exit"     shift, and go to state 11

    liste_instructions       go to state 107
    instruction              go to state 14
    declaration_de_fonction  go to state 15
    appel_de_fonction        go to state 16


State 69

    9 instruction: "for" ID "in" • liste_operandes "do" liste_instructions "done"
   32 liste_operandes: • liste_operandes operande
   33                | • operande
   34                | • '$' '{' ID '[' '*' ']' '}'
   50 operande: • '$' '{' ID '}'
   51         | • '$' '{' ID '[' operande_entier ']' '}'
   52         | • MOT
   53         | • '$' ENTIER
   54         | • '$' '*'
   55         | • '$' '?'
   56         | • CHAINE
   57         | • '$' '(' "expr" somme_entiere ')'
   58         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 23

    liste_operandes  go to state 108
    operande         go to state 26


State 70

    2 liste_instructions: • liste_instructions ';' instruction
    3                   | • instruction
    4 instruction: • ID '=' concatenation
    5            | • ID '[' operande_entier ']' '=' concatenation
    6            | • "declare" ID '[' ENTIER ']'
    7            | • IF test_bloc "then" liste_instructions else_part "fi"
    8            | • "for" ID "do" liste_instructions "done"
    9            | • "for" ID "in" liste_operandes "do" liste_instructions "done"
   10            | • "while" test_bloc "do" liste_instructions "done"
   10            | "while" test_bloc "do" • liste_instructions "done"
   11            | • "until" test_bloc "do" liste_instructions "done"
   12            | • "case" operande "in" liste_cas "esac"
   13            | • "echo" liste_operandes
   14            | • "read" ID
   15            | • "read" ID '[' operande_entier ']'
   16            | • declaration_de_fonction
   17            | • appel_de_fonction
   18            | • "return"
   19            | • "return" operande_entier
   20            | • "exit"
   21            | • "exit" operande_entier
   85 declaration_de_fonction: • ID '(' ')' '{' decl_loc liste_instructions '}'
   88 appel_de_fonction: • ID liste_operandes
   89                  | • ID

    IF         shift, and go to state 1
    ID         shift, and go to state 2
    "declare"  shift, and go to state 3
    "for"      shift, and go to state 4
    "while"    shift, and go to state 5
    "until"    shift, and go to state 6
    "case"     shift, and go to state 7
    "echo"     shift, and go to state 8
    "read"     shift, and go to state 9
    "return"   shift, and go to state 10
    "exit"     shift, and go to state 11

    liste_instructions       go to state 109
    instruction              go to state 14
    declaration_de_fonction  go to state 15
    appel_de_fonction        go to state 16


State 71

    2 liste_instructions: • liste_instructions ';' instruction
    3                   | • instruction
    4 instruction: • ID '=' concatenation
    5            | • ID '[' operande_entier ']' '=' concatenation
    6            | • "declare" ID '[' ENTIER ']'
    7            | • IF test_bloc "then" liste_instructions else_part "fi"
    8            | • "for" ID "do" liste_instructions "done"
    9            | • "for" ID "in" liste_operandes "do" liste_instructions "done"
   10            | • "while" test_bloc "do" liste_instructions "done"
   11            | • "until" test_bloc "do" liste_instructions "done"
   11            | "until" test_bloc "do" • liste_instructions "done"
   12            | • "case" operande "in" liste_cas "esac"
   13            | • "echo" liste_operandes
   14            | • "read" ID
   15            | • "read" ID '[' operande_entier ']'
   16            | • declaration_de_fonction
   17            | • appel_de_fonction
   18            | • "return"
   19            | • "return" operande_entier
   20            | • "exit"
   21            | • "exit" operande_entier
   85 declaration_de_fonction: • ID '(' ')' '{' decl_loc liste_instructions '}'
   88 appel_de_fonction: • ID liste_operandes
   89                  | • ID

    IF         shift, and go to state 1
    ID         shift, and go to state 2
    "declare"  shift, and go to state 3
    "for"      shift, and go to state 4
    "while"    shift, and go to state 5
    "until"    shift, and go to state 6
    "case"     shift, and go to state 7
    "echo"     shift, and go to state 8
    "read"     shift, and go to state 9
    "return"   shift, and go to state 10
    "exit"     shift, and go to state 11

    liste_instructions       go to state 110
    instruction              go to state 14
    declaration_de_fonction  go to state 15
    appel_de_fonction        go to state 16


State 72

   50 operande: '$' '{' • ID '}'
   51         | '$' '{' • ID '[' operande_entier ']' '}'

    ID  shift, and go to state 111


State 73

   12 instruction: "case" operande "in" • liste_cas "esac"
   25 liste_cas: • liste_cas filtre ')' liste_instructions ';' ';'
   26          | • filtre ')' liste_instructions ';' ';'
   27 filtre: • MOT
   28       | • CHAINE
   29       | • filtre '|' MOT
   30       | • filtre '|' CHAINE
   31       | • '*'

    MOT     shift, and go to state 112
    CHAINE  shift, and go to state 113
    '*'     shift, and go to state 114

    liste_cas  go to state 115
    filtre     go to state 116


State 74

   15 instruction: "read" ID '[' • operande_entier ']'
   71 operande_entier: • '$' '{' ID '}'
   72                | • '$' '{' ID '[' operande_entier ']' '}'
   73                | • '$' ENTIER
   74                | • plus_ou_moins '$' '{' ID '}'
   75                | • plus_ou_moins '$' '{' ID '[' operande_entier ']' '}'
   76                | • plus_ou_moins '$' ENTIER
   77                | • ENTIER
   78                | • plus_ou_moins ENTIER
   79                | • '(' somme_entiere ')'
   80 plus_ou_moins: • '+'
   81              | • '-'

    ENTIER  shift, and go to state 35
    '+'     shift, and go to state 36
    '-'     shift, and go to state 37
    '$'     shift, and go to state 38
    '('     shift, and go to state 39

    operande_entier  go to state 117
    plus_ou_moins    go to state 41


State 75

   73 operande_entier: '$' ENTIER •

    $default  reduce using rule 73 (operande_entier)


State 76

   71 operande_entier: '$' '{' • ID '}'
   72                | '$' '{' • ID '[' operande_entier ']' '}'

    ID  shift, and go to state 118


State 77

   67 somme_entiere: somme_entiere • plus_ou_moins produit_entier
   79 operande_entier: '(' somme_entiere • ')'
   80 plus_ou_moins: • '+'
   81              | • '-'

    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    ')'  shift, and go to state 119

    plus_ou_moins  go to state 120


State 78

   68 somme_entiere: produit_entier •  ['+', '-', ')']
   69 produit_entier: produit_entier • fois_div_mod operande_entier
   82 fois_div_mod: • '*'
   83             | • '/'
   84             | • '%'

    '*'  shift, and go to state 121
    '/'  shift, and go to state 122
    '%'  shift, and go to state 123

    $default  reduce using rule 68 (somme_entiere)

    fois_div_mod  go to state 124


State 79

   70 produit_entier: operande_entier •

    $default  reduce using rule 70 (produit_entier)


State 80

   78 operande_entier: plus_ou_moins ENTIER •

    $default  reduce using rule 78 (operande_entier)


State 81

   74 operande_entier: plus_ou_moins '$' • '{' ID '}'
   75                | plus_ou_moins '$' • '{' ID '[' operande_entier ']' '}'
   76                | plus_ou_moins '$' • ENTIER

    ENTIER  shift, and go to state 125
    '{'     shift, and go to state 126


State 82

    2 liste_instructions: liste_instructions ';' instruction •

    $default  reduce using rule 2 (liste_instructions)


State 83

   38 test_expr: test_expr • "-o" test_expr2
   42 test_expr3: '(' test_expr • ')'

    ')'   shift, and go to state 127
    "-o"  shift, and go to state 89


State 84

   35 concatenation: • concatenation operande
   36              | • operande
   38 test_expr: • test_expr "-o" test_expr2
   39          | • test_expr2
   40 test_expr2: • test_expr2 "-a" test_expr3
   41           | • test_expr3
   42 test_expr3: • '(' test_expr ')'
   43           | • '!' '(' test_expr ')'
   43           | '!' '(' • test_expr ')'
   44           | • test_instruction
   45           | • '!' test_instruction
   46 test_instruction: • concatenation '=' concatenation
   47                 | • concatenation "!=" concatenation
   48                 | • operateur1 concatenation
   49                 | • operande operateur2 operande
   50 operande: • '$' '{' ID '}'
   51         | • '$' '{' ID '[' operande_entier ']' '}'
   52         | • MOT
   53         | • '$' ENTIER
   54         | • '$' '*'
   55         | • '$' '?'
   56         | • CHAINE
   57         | • '$' '(' "expr" somme_entiere ')'
   58         | • '$' '(' appel_de_fonction ')'
   59 operateur1: • "-n"
   60           | • "-z"

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 31
    '('     shift, and go to state 45
    '!'     shift, and go to state 46
    "-n"    shift, and go to state 47
    "-z"    shift, and go to state 48

    concatenation     go to state 49
    test_expr         go to state 128
    test_expr2        go to state 51
    test_expr3        go to state 52
    test_instruction  go to state 53
    operande          go to state 54
    operateur1        go to state 55


State 85

   45 test_expr3: '!' test_instruction •

    $default  reduce using rule 45 (test_expr3)


State 86

   35 concatenation: • concatenation operande
   36              | • operande
   46 test_instruction: concatenation '=' • concatenation
   50 operande: • '$' '{' ID '}'
   51         | • '$' '{' ID '[' operande_entier ']' '}'
   52         | • MOT
   53         | • '$' ENTIER
   54         | • '$' '*'
   55         | • '$' '?'
   56         | • CHAINE
   57         | • '$' '(' "expr" somme_entiere ')'
   58         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 31

    concatenation  go to state 129
    operande       go to state 58


State 87

   35 concatenation: • concatenation operande
   36              | • operande
   47 test_instruction: concatenation "!=" • concatenation
   50 operande: • '$' '{' ID '}'
   51         | • '$' '{' ID '[' operande_entier ']' '}'
   52         | • MOT
   53         | • '$' ENTIER
   54         | • '$' '*'
   55         | • '$' '?'
   56         | • CHAINE
   57         | • '$' '(' "expr" somme_entiere ')'
   58         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 31

    concatenation  go to state 130
    operande       go to state 58


State 88

   35 concatenation: concatenation operande •

    $default  reduce using rule 35 (concatenation)


State 89

   35 concatenation: • concatenation operande
   36              | • operande
   38 test_expr: test_expr "-o" • test_expr2
   40 test_expr2: • test_expr2 "-a" test_expr3
   41           | • test_expr3
   42 test_expr3: • '(' test_expr ')'
   43           | • '!' '(' test_expr ')'
   44           | • test_instruction
   45           | • '!' test_instruction
   46 test_instruction: • concatenation '=' concatenation
   47                 | • concatenation "!=" concatenation
   48                 | • operateur1 concatenation
   49                 | • operande operateur2 operande
   50 operande: • '$' '{' ID '}'
   51         | • '$' '{' ID '[' operande_entier ']' '}'
   52         | • MOT
   53         | • '$' ENTIER
   54         | • '$' '*'
   55         | • '$' '?'
   56         | • CHAINE
   57         | • '$' '(' "expr" somme_entiere ')'
   58         | • '$' '(' appel_de_fonction ')'
   59 operateur1: • "-n"
   60           | • "-z"

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 31
    '('     shift, and go to state 45
    '!'     shift, and go to state 46
    "-n"    shift, and go to state 47
    "-z"    shift, and go to state 48

    concatenation     go to state 49
    test_expr2        go to state 131
    test_expr3        go to state 52
    test_instruction  go to state 53
    operande          go to state 54
    operateur1        go to state 55


State 90

   35 concatenation: • concatenation operande
   36              | • operande
   40 test_expr2: test_expr2 "-a" • test_expr3
   42 test_expr3: • '(' test_expr ')'
   43           | • '!' '(' test_expr ')'
   44           | • test_instruction
   45           | • '!' test_instruction
   46 test_instruction: • concatenation '=' concatenation
   47                 | • concatenation "!=" concatenation
   48                 | • operateur1 concatenation
   49                 | • operande operateur2 operande
   50 operande: • '$' '{' ID '}'
   51         | • '$' '{' ID '[' operande_entier ']' '}'
   52         | • MOT
   53         | • '$' ENTIER
   54         | • '$' '*'
   55         | • '$' '?'
   56         | • CHAINE
   57         | • '$' '(' "expr" somme_entiere ')'
   58         | • '$' '(' appel_de_fonction ')'
   59 operateur1: • "-n"
   60           | • "-z"

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 31
    '('     shift, and go to state 45
    '!'     shift, and go to state 46
    "-n"    shift, and go to state 47
    "-z"    shift, and go to state 48

    concatenation     go to state 49
    test_expr3        go to state 132
    test_instruction  go to state 53
    operande          go to state 54
    operateur1        go to state 55


State 91

   61 operateur2: "-eq" •

    $default  reduce using rule 61 (operateur2)


State 92

   62 operateur2: "-ne" •

    $default  reduce using rule 62 (operateur2)


State 93

   63 operateur2: "-gt" •

    $default  reduce using rule 63 (operateur2)


State 94

   64 operateur2: "-ge" •

    $default  reduce using rule 64 (operateur2)


State 95

   65 operateur2: "-lt" •

    $default  reduce using rule 65 (operateur2)


State 96

   66 operateur2: "-le" •

    $default  reduce using rule 66 (operateur2)


State 97

   49 test_instruction: operande operateur2 • operande
   50 operande: • '$' '{' ID '}'
   51         | • '$' '{' ID '[' operande_entier ']' '}'
   52         | • MOT
   53         | • '$' ENTIER
   54         | • '$' '*'
   55         | • '$' '?'
   56         | • CHAINE
   57         | • '$' '(' "expr" somme_entiere ')'
   58         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 31

    operande  go to state 133


State 98

   35 concatenation: concatenation • operande
   48 test_instruction: operateur1 concatenation •  ["then", "do", ')', "-o", "-a"]
   50 operande: • '$' '{' ID '}'
   51         | • '$' '{' ID '[' operande_entier ']' '}'
   52         | • MOT
   53         | • '$' ENTIER
   54         | • '$' '*'
   55         | • '$' '?'
   56         | • CHAINE
   57         | • '$' '(' "expr" somme_entiere ')'
   58         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 31

    $default  reduce using rule 48 (test_instruction)

    operande  go to state 88


State 99

    2 liste_instructions: liste_instructions • ';' instruction
    7 instruction: IF test_bloc "then" liste_instructions • else_part "fi"
   22 else_part: • "elif" test_bloc "then" liste_instructions else_part
   23          | • "else" liste_instructions
   24          | ε •  ["fi"]

    ';'     shift, and go to state 44
    "elif"  shift, and go to state 134
    "else"  shift, and go to state 135

    $default  reduce using rule 24 (else_part)

    else_part  go to state 136


State 100

    5 instruction: ID '[' operande_entier ']' • '=' concatenation

    '='  shift, and go to state 137


State 101

   34 liste_operandes: '$' '{' ID • '[' '*' ']' '}'
   50 operande: '$' '{' ID • '}'
   51         | '$' '{' ID • '[' operande_entier ']' '}'

    '['  shift, and go to state 138
    '}'  shift, and go to state 139


State 102

   32 liste_operandes: • liste_operandes operande
   33                | • operande
   34                | • '$' '{' ID '[' '*' ']' '}'
   50 operande: • '$' '{' ID '}'
   51         | • '$' '{' ID '[' operande_entier ']' '}'
   52         | • MOT
   53         | • '$' ENTIER
   54         | • '$' '*'
   55         | • '$' '?'
   56         | • CHAINE
   57         | • '$' '(' "expr" somme_entiere ')'
   58         | • '$' '(' appel_de_fonction ')'
   88 appel_de_fonction: ID • liste_operandes
   89                  | ID •  [')']

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 23

    $default  reduce using rule 89 (appel_de_fonction)

    liste_operandes  go to state 25
    operande         go to state 26


State 103

   57 operande: '$' '(' "expr" • somme_entiere ')'
   67 somme_entiere: • somme_entiere plus_ou_moins produit_entier
   68              | • produit_entier
   69 produit_entier: • produit_entier fois_div_mod operande_entier
   70               | • operande_entier
   71 operande_entier: • '$' '{' ID '}'
   72                | • '$' '{' ID '[' operande_entier ']' '}'
   73                | • '$' ENTIER
   74                | • plus_ou_moins '$' '{' ID '}'
   75                | • plus_ou_moins '$' '{' ID '[' operande_entier ']' '}'
   76                | • plus_ou_moins '$' ENTIER
   77                | • ENTIER
   78                | • plus_ou_moins ENTIER
   79                | • '(' somme_entiere ')'
   80 plus_ou_moins: • '+'
   81              | • '-'

    ENTIER  shift, and go to state 35
    '+'     shift, and go to state 36
    '-'     shift, and go to state 37
    '$'     shift, and go to state 38
    '('     shift, and go to state 39

    somme_entiere    go to state 140
    produit_entier   go to state 78
    operande_entier  go to state 79
    plus_ou_moins    go to state 41


State 104

   58 operande: '$' '(' appel_de_fonction • ')'

    ')'  shift, and go to state 141


State 105

   85 declaration_de_fonction: ID '(' ')' '{' • decl_loc liste_instructions '}'
   86 decl_loc: • decl_loc "local" ID '=' concatenation ';'
   87         | ε •

    $default  reduce using rule 87 (decl_loc)

    decl_loc  go to state 142


State 106

    6 instruction: "declare" ID '[' ENTIER • ']'

    ']'  shift, and go to state 143


State 107

    2 liste_instructions: liste_instructions • ';' instruction
    8 instruction: "for" ID "do" liste_instructions • "done"

    ';'     shift, and go to state 44
    "done"  shift, and go to state 144


State 108

    9 instruction: "for" ID "in" liste_operandes • "do" liste_instructions "done"
   32 liste_operandes: liste_operandes • operande
   50 operande: • '$' '{' ID '}'
   51         | • '$' '{' ID '[' operande_entier ']' '}'
   52         | • MOT
   53         | • '$' ENTIER
   54         | • '$' '*'
   55         | • '$' '?'
   56         | • CHAINE
   57         | • '$' '(' "expr" somme_entiere ')'
   58         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    "do"    shift, and go to state 145
    '$'     shift, and go to state 31

    operande  go to state 66


State 109

    2 liste_instructions: liste_instructions • ';' instruction
   10 instruction: "while" test_bloc "do" liste_instructions • "done"

    ';'     shift, and go to state 44
    "done"  shift, and go to state 146


State 110

    2 liste_instructions: liste_instructions • ';' instruction
   11 instruction: "until" test_bloc "do" liste_instructions • "done"

    ';'     shift, and go to state 44
    "done"  shift, and go to state 147


State 111

   50 operande: '$' '{' ID • '}'
   51         | '$' '{' ID • '[' operande_entier ']' '}'

    '['  shift, and go to state 148
    '}'  shift, and go to state 139


State 112

   27 filtre: MOT •

    $default  reduce using rule 27 (filtre)


State 113

   28 filtre: CHAINE •

    $default  reduce using rule 28 (filtre)


State 114

   31 filtre: '*' •

    $default  reduce using rule 31 (filtre)


State 115

   12 instruction: "case" operande "in" liste_cas • "esac"
   25 liste_cas: liste_cas • filtre ')' liste_instructions ';' ';'
   27 filtre: • MOT
   28       | • CHAINE
   29       | • filtre '|' MOT
   30       | • filtre '|' CHAINE
   31       | • '*'

    MOT     shift, and go to state 112
    CHAINE  shift, and go to state 113
    '*'     shift, and go to state 114
    "esac"  shift, and go to state 149

    filtre  go to state 150


State 116

   26 liste_cas: filtre • ')' liste_instructions ';' ';'
   29 filtre: filtre • '|' MOT
   30       | filtre • '|' CHAINE

    ')'  shift, and go to state 151
    '|'  shift, and go to state 152


State 117

   15 instruction: "read" ID '[' operande_entier • ']'

    ']'  shift, and go to state 153


State 118

   71 operande_entier: '$' '{' ID • '}'
   72                | '$' '{' ID • '[' operande_entier ']' '}'

    '['  shift, and go to state 154
    '}'  shift, and go to state 155


State 119

   79 operande_entier: '(' somme_entiere ')' •

    $default  reduce using rule 79 (operande_entier)


State 120

   67 somme_entiere: somme_entiere plus_ou_moins • produit_entier
   69 produit_entier: • produit_entier fois_div_mod operande_entier
   70               | • operande_entier
   71 operande_entier: • '$' '{' ID '}'
   72                | • '$' '{' ID '[' operande_entier ']' '}'
   73                | • '$' ENTIER
   74                | • plus_ou_moins '$' '{' ID '}'
   75                | • plus_ou_moins '$' '{' ID '[' operande_entier ']' '}'
   76                | • plus_ou_moins '$' ENTIER
   77                | • ENTIER
   78                | • plus_ou_moins ENTIER
   79                | • '(' somme_entiere ')'
   80 plus_ou_moins: • '+'
   81              | • '-'

    ENTIER  shift, and go to state 35
    '+'     shift, and go to state 36
    '-'     shift, and go to state 37
    '$'     shift, and go to state 38
    '('     shift, and go to state 39

    produit_entier   go to state 156
    operande_entier  go to state 79
    plus_ou_moins    go to state 41


State 121

   82 fois_div_mod: '*' •

    $default  reduce using rule 82 (fois_div_mod)


State 122

   83 fois_div_mod: '/' •

    $default  reduce using rule 83 (fois_div_mod)


State 123

   84 fois_div_mod: '%' •

    $default  reduce using rule 84 (fois_div_mod)


State 124

   69 produit_entier: produit_entier fois_div_mod • operande_entier
   71 operande_entier: • '$' '{' ID '}'
   72                | • '$' '{' ID '[' operande_entier ']' '}'
   73                | • '$' ENTIER
   74                | • plus_ou_moins '$' '{' ID '}'
   75                | • plus_ou_moins '$' '{' ID '[' operande_entier ']' '}'
   76                | • plus_ou_moins '$' ENTIER
   77                | • ENTIER
   78                | • plus_ou_moins ENTIER
   79                | • '(' somme_entiere ')'
   80 plus_ou_moins: • '+'
   81              | • '-'

    ENTIER  shift, and go to state 35
    '+'     shift, and go to state 36
    '-'     shift, and go to state 37
    '$'     shift, and go to state 38
    '('     shift, and go to state 39

    operande_entier  go to state 157
    plus_ou_moins    go to state 41


State 125

   76 operande_entier: plus_ou_moins '$' ENTIER •

    $default  reduce using rule 76 (operande_entier)


State 126

   74 operande_entier: plus_ou_moins '$' '{' • ID '}'
   75                | plus_ou_moins '$' '{' • ID '[' operande_entier ']' '}'

    ID  shift, and go to state 158


State 127

   42 test_expr3: '(' test_expr ')' •

    $default  reduce using rule 42 (test_expr3)


State 128

   38 test_expr: test_expr • "-o" test_expr2
   43 test_expr3: '!' '(' test_expr • ')'

    ')'   shift, and go to state 159
    "-o"  shift, and go to state 89


State 129

   35 concatenation: concatenation • operande
   46 test_instruction: concatenation '=' concatenation •  ["then", "do", ')', "-o", "-a"]
   50 operande: • '$' '{' ID '}'
   51         | • '$' '{' ID '[' operande_entier ']' '}'
   52         | • MOT
   53         | • '$' ENTIER
   54         | • '$' '*'
   55         | • '$' '?'
   56         | • CHAINE
   57         | • '$' '(' "expr" somme_entiere ')'
   58         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 31

    $default  reduce using rule 46 (test_instruction)

    operande  go to state 88


State 130

   35 concatenation: concatenation • operande
   47 test_instruction: concatenation "!=" concatenation •  ["then", "do", ')', "-o", "-a"]
   50 operande: • '$' '{' ID '}'
   51         | • '$' '{' ID '[' operande_entier ']' '}'
   52         | • MOT
   53         | • '$' ENTIER
   54         | • '$' '*'
   55         | • '$' '?'
   56         | • CHAINE
   57         | • '$' '(' "expr" somme_entiere ')'
   58         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 31

    $default  reduce using rule 47 (test_instruction)

    operande  go to state 88


State 131

   38 test_expr: test_expr "-o" test_expr2 •  ["then", "do", ')', "-o"]
   40 test_expr2: test_expr2 • "-a" test_expr3

    "-a"  shift, and go to state 90

    $default  reduce using rule 38 (test_expr)


State 132

   40 test_expr2: test_expr2 "-a" test_expr3 •

    $default  reduce using rule 40 (test_expr2)


State 133

   49 test_instruction: operande operateur2 operande •

    $default  reduce using rule 49 (test_instruction)


State 134

   22 else_part: "elif" • test_bloc "then" liste_instructions else_part
   37 test_bloc: • "test" test_expr

    "test"  shift, and go to state 17

    test_bloc  go to state 160


State 135

    2 liste_instructions: • liste_instructions ';' instruction
    3                   | • instruction
    4 instruction: • ID '=' concatenation
    5            | • ID '[' operande_entier ']' '=' concatenation
    6            | • "declare" ID '[' ENTIER ']'
    7            | • IF test_bloc "then" liste_instructions else_part "fi"
    8            | • "for" ID "do" liste_instructions "done"
    9            | • "for" ID "in" liste_operandes "do" liste_instructions "done"
   10            | • "while" test_bloc "do" liste_instructions "done"
   11            | • "until" test_bloc "do" liste_instructions "done"
   12            | • "case" operande "in" liste_cas "esac"
   13            | • "echo" liste_operandes
   14            | • "read" ID
   15            | • "read" ID '[' operande_entier ']'
   16            | • declaration_de_fonction
   17            | • appel_de_fonction
   18            | • "return"
   19            | • "return" operande_entier
   20            | • "exit"
   21            | • "exit" operande_entier
   23 else_part: "else" • liste_instructions
   85 declaration_de_fonction: • ID '(' ')' '{' decl_loc liste_instructions '}'
   88 appel_de_fonction: • ID liste_operandes
   89                  | • ID

    IF         shift, and go to state 1
    ID         shift, and go to state 2
    "declare"  shift, and go to state 3
    "for"      shift, and go to state 4
    "while"    shift, and go to state 5
    "until"    shift, and go to state 6
    "case"     shift, and go to state 7
    "echo"     shift, and go to state 8
    "read"     shift, and go to state 9
    "return"   shift, and go to state 10
    "exit"     shift, and go to state 11

    liste_instructions       go to state 161
    instruction              go to state 14
    declaration_de_fonction  go to state 15
    appel_de_fonction        go to state 16


State 136

    7 instruction: IF test_bloc "then" liste_instructions else_part • "fi"

    "fi"  shift, and go to state 162


State 137

    5 instruction: ID '[' operande_entier ']' '=' • concatenation
   35 concatenation: • concatenation operande
   36              | • operande
   50 operande: • '$' '{' ID '}'
   51         | • '$' '{' ID '[' operande_entier ']' '}'
   52         | • MOT
   53         | • '$' ENTIER
   54         | • '$' '*'
   55         | • '$' '?'
   56         | • CHAINE
   57         | • '$' '(' "expr" somme_entiere ')'
   58         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 31

    concatenation  go to state 163
    operande       go to state 58


State 138

   34 liste_operandes: '$' '{' ID '[' • '*' ']' '}'
   51 operande: '$' '{' ID '[' • operande_entier ']' '}'
   71 operande_entier: • '$' '{' ID '}'
   72                | • '$' '{' ID '[' operande_entier ']' '}'
   73                | • '$' ENTIER
   74                | • plus_ou_moins '$' '{' ID '}'
   75                | • plus_ou_moins '$' '{' ID '[' operande_entier ']' '}'
   76                | • plus_ou_moins '$' ENTIER
   77                | • ENTIER
   78                | • plus_ou_moins ENTIER
   79                | • '(' somme_entiere ')'
   80 plus_ou_moins: • '+'
   81              | • '-'

    ENTIER  shift, and go to state 35
    '+'     shift, and go to state 36
    '-'     shift, and go to state 37
    '*'     shift, and go to state 164
    '$'     shift, and go to state 38
    '('     shift, and go to state 39

    operande_entier  go to state 165
    plus_ou_moins    go to state 41


State 139

   50 operande: '$' '{' ID '}' •

    $default  reduce using rule 50 (operande)


State 140

   57 operande: '$' '(' "expr" somme_entiere • ')'
   67 somme_entiere: somme_entiere • plus_ou_moins produit_entier
   80 plus_ou_moins: • '+'
   81              | • '-'

    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    ')'  shift, and go to state 166

    plus_ou_moins  go to state 120


State 141

   58 operande: '$' '(' appel_de_fonction ')' •

    $default  reduce using rule 58 (operande)


State 142

    2 liste_instructions: • liste_instructions ';' instruction
    3                   | • instruction
    4 instruction: • ID '=' concatenation
    5            | • ID '[' operande_entier ']' '=' concatenation
    6            | • "declare" ID '[' ENTIER ']'
    7            | • IF test_bloc "then" liste_instructions else_part "fi"
    8            | • "for" ID "do" liste_instructions "done"
    9            | • "for" ID "in" liste_operandes "do" liste_instructions "done"
   10            | • "while" test_bloc "do" liste_instructions "done"
   11            | • "until" test_bloc "do" liste_instructions "done"
   12            | • "case" operande "in" liste_cas "esac"
   13            | • "echo" liste_operandes
   14            | • "read" ID
   15            | • "read" ID '[' operande_entier ']'
   16            | • declaration_de_fonction
   17            | • appel_de_fonction
   18            | • "return"
   19            | • "return" operande_entier
   20            | • "exit"
   21            | • "exit" operande_entier
   85 declaration_de_fonction: • ID '(' ')' '{' decl_loc liste_instructions '}'
   85                        | ID '(' ')' '{' decl_loc • liste_instructions '}'
   86 decl_loc: decl_loc • "local" ID '=' concatenation ';'
   88 appel_de_fonction: • ID liste_operandes
   89                  | • ID

    IF         shift, and go to state 1
    ID         shift, and go to state 2
    "declare"  shift, and go to state 3
    "for"      shift, and go to state 4
    "while"    shift, and go to state 5
    "until"    shift, and go to state 6
    "case"     shift, and go to state 7
    "echo"     shift, and go to state 8
    "read"     shift, and go to state 9
    "return"   shift, and go to state 10
    "exit"     shift, and go to state 11
    "local"    shift, and go to state 167

    liste_instructions       go to state 168
    instruction              go to state 14
    declaration_de_fonction  go to state 15
    appel_de_fonction        go to state 16


State 143

    6 instruction: "declare" ID '[' ENTIER ']' •

    $default  reduce using rule 6 (instruction)


State 144

    8 instruction: "for" ID "do" liste_instructions "done" •

    $default  reduce using rule 8 (instruction)


State 145

    2 liste_instructions: • liste_instructions ';' instruction
    3                   | • instruction
    4 instruction: • ID '=' concatenation
    5            | • ID '[' operande_entier ']' '=' concatenation
    6            | • "declare" ID '[' ENTIER ']'
    7            | • IF test_bloc "then" liste_instructions else_part "fi"
    8            | • "for" ID "do" liste_instructions "done"
    9            | • "for" ID "in" liste_operandes "do" liste_instructions "done"
    9            | "for" ID "in" liste_operandes "do" • liste_instructions "done"
   10            | • "while" test_bloc "do" liste_instructions "done"
   11            | • "until" test_bloc "do" liste_instructions "done"
   12            | • "case" operande "in" liste_cas "esac"
   13            | • "echo" liste_operandes
   14            | • "read" ID
   15            | • "read" ID '[' operande_entier ']'
   16            | • declaration_de_fonction
   17            | • appel_de_fonction
   18            | • "return"
   19            | • "return" operande_entier
   20            | • "exit"
   21            | • "exit" operande_entier
   85 declaration_de_fonction: • ID '(' ')' '{' decl_loc liste_instructions '}'
   88 appel_de_fonction: • ID liste_operandes
   89                  | • ID

    IF         shift, and go to state 1
    ID         shift, and go to state 2
    "declare"  shift, and go to state 3
    "for"      shift, and go to state 4
    "while"    shift, and go to state 5
    "until"    shift, and go to state 6
    "case"     shift, and go to state 7
    "echo"     shift, and go to state 8
    "read"     shift, and go to state 9
    "return"   shift, and go to state 10
    "exit"     shift, and go to state 11

    liste_instructions       go to state 169
    instruction              go to state 14
    declaration_de_fonction  go to state 15
    appel_de_fonction        go to state 16


State 146

   10 instruction: "while" test_bloc "do" liste_instructions "done" •

    $default  reduce using rule 10 (instruction)


State 147

   11 instruction: "until" test_bloc "do" liste_instructions "done" •

    $default  reduce using rule 11 (instruction)


State 148

   51 operande: '$' '{' ID '[' • operande_entier ']' '}'
   71 operande_entier: • '$' '{' ID '}'
   72                | • '$' '{' ID '[' operande_entier ']' '}'
   73                | • '$' ENTIER
   74                | • plus_ou_moins '$' '{' ID '}'
   75                | • plus_ou_moins '$' '{' ID '[' operande_entier ']' '}'
   76                | • plus_ou_moins '$' ENTIER
   77                | • ENTIER
   78                | • plus_ou_moins ENTIER
   79                | • '(' somme_entiere ')'
   80 plus_ou_moins: • '+'
   81              | • '-'

    ENTIER  shift, and go to state 35
    '+'     shift, and go to state 36
    '-'     shift, and go to state 37
    '$'     shift, and go to state 38
    '('     shift, and go to state 39

    operande_entier  go to state 165
    plus_ou_moins    go to state 41


State 149

   12 instruction: "case" operande "in" liste_cas "esac" •

    $default  reduce using rule 12 (instruction)


State 150

   25 liste_cas: liste_cas filtre • ')' liste_instructions ';' ';'
   29 filtre: filtre • '|' MOT
   30       | filtre • '|' CHAINE

    ')'  shift, and go to state 170
    '|'  shift, and go to state 152


State 151

    2 liste_instructions: • liste_instructions ';' instruction
    3                   | • instruction
    4 instruction: • ID '=' concatenation
    5            | • ID '[' operande_entier ']' '=' concatenation
    6            | • "declare" ID '[' ENTIER ']'
    7            | • IF test_bloc "then" liste_instructions else_part "fi"
    8            | • "for" ID "do" liste_instructions "done"
    9            | • "for" ID "in" liste_operandes "do" liste_instructions "done"
   10            | • "while" test_bloc "do" liste_instructions "done"
   11            | • "until" test_bloc "do" liste_instructions "done"
   12            | • "case" operande "in" liste_cas "esac"
   13            | • "echo" liste_operandes
   14            | • "read" ID
   15            | • "read" ID '[' operande_entier ']'
   16            | • declaration_de_fonction
   17            | • appel_de_fonction
   18            | • "return"
   19            | • "return" operande_entier
   20            | • "exit"
   21            | • "exit" operande_entier
   26 liste_cas: filtre ')' • liste_instructions ';' ';'
   85 declaration_de_fonction: • ID '(' ')' '{' decl_loc liste_instructions '}'
   88 appel_de_fonction: • ID liste_operandes
   89                  | • ID

    IF         shift, and go to state 1
    ID         shift, and go to state 2
    "declare"  shift, and go to state 3
    "for"      shift, and go to state 4
    "while"    shift, and go to state 5
    "until"    shift, and go to state 6
    "case"     shift, and go to state 7
    "echo"     shift, and go to state 8
    "read"     shift, and go to state 9
    "return"   shift, and go to state 10
    "exit"     shift, and go to state 11

    liste_instructions       go to state 171
    instruction              go to state 14
    declaration_de_fonction  go to state 15
    appel_de_fonction        go to state 16


State 152

   29 filtre: filtre '|' • MOT
   30       | filtre '|' • CHAINE

    MOT     shift, and go to state 172
    CHAINE  shift, and go to state 173


State 153

   15 instruction: "read" ID '[' operande_entier ']' •

    $default  reduce using rule 15 (instruction)


State 154

   71 operande_entier: • '$' '{' ID '}'
   72                | • '$' '{' ID '[' operande_entier ']' '}'
   72                | '$' '{' ID '[' • operande_entier ']' '}'
   73                | • '$' ENTIER
   74                | • plus_ou_moins '$' '{' ID '}'
   75                | • plus_ou_moins '$' '{' ID '[' operande_entier ']' '}'
   76                | • plus_ou_moins '$' ENTIER
   77                | • ENTIER
   78                | • plus_ou_moins ENTIER
   79                | • '(' somme_entiere ')'
   80 plus_ou_moins: • '+'
   81              | • '-'

    ENTIER  shift, and go to state 35
    '+'     shift, and go to state 36
    '-'     shift, and go to state 37
    '$'     shift, and go to state 38
    '('     shift, and go to state 39

    operande_entier  go to state 174
    plus_ou_moins    go to state 41


State 155

   71 operande_entier: '$' '{' ID '}' •

    $default  reduce using rule 71 (operande_entier)


State 156

   67 somme_entiere: somme_entiere plus_ou_moins produit_entier •  ['+', '-', ')']
   69 produit_entier: produit_entier • fois_div_mod operande_entier
   82 fois_div_mod: • '*'
   83             | • '/'
   84             | • '%'

    '*'  shift, and go to state 121
    '/'  shift, and go to state 122
    '%'  shift, and go to state 123

    $default  reduce using rule 67 (somme_entiere)

    fois_div_mod  go to state 124


State 157

   69 produit_entier: produit_entier fois_div_mod operande_entier •

    $default  reduce using rule 69 (produit_entier)


State 158

   74 operande_entier: plus_ou_moins '$' '{' ID • '}'
   75                | plus_ou_moins '$' '{' ID • '[' operande_entier ']' '}'

    '['  shift, and go to state 175
    '}'  shift, and go to state 176


State 159

   43 test_expr3: '!' '(' test_expr ')' •

    $default  reduce using rule 43 (test_expr3)


State 160

   22 else_part: "elif" test_bloc • "then" liste_instructions else_part

    "then"  shift, and go to state 177


State 161

    2 liste_instructions: liste_instructions • ';' instruction
   23 else_part: "else" liste_instructions •  ["fi"]

    ';'  shift, and go to state 44

    $default  reduce using rule 23 (else_part)


State 162

    7 instruction: IF test_bloc "then" liste_instructions else_part "fi" •

    $default  reduce using rule 7 (instruction)


State 163

    5 instruction: ID '[' operande_entier ']' '=' concatenation •  [$end, ';', "fi", "done", "elif", "else", '}']
   35 concatenation: concatenation • operande
   50 operande: • '$' '{' ID '}'
   51         | • '$' '{' ID '[' operande_entier ']' '}'
   52         | • MOT
   53         | • '$' ENTIER
   54         | • '$' '*'
   55         | • '$' '?'
   56         | • CHAINE
   57         | • '$' '(' "expr" somme_entiere ')'
   58         | • '$' '(' appel_de_fonction ')'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 31

    $default  reduce using rule 5 (instruction)

    operande  go to state 88


State 164

   34 liste_operandes: '$' '{' ID '[' '*' • ']' '}'

    ']'  shift, and go to state 178


State 165

   51 operande: '$' '{' ID '[' operande_entier • ']' '}'

    ']'  shift, and go to state 179


State 166

   57 operande: '$' '(' "expr" somme_entiere ')' •

    $default  reduce using rule 57 (operande)


State 167

   86 decl_loc: decl_loc "local" • ID '=' concatenation ';'

    ID  shift, and go to state 180


State 168

    2 liste_instructions: liste_instructions • ';' instruction
   85 declaration_de_fonction: ID '(' ')' '{' decl_loc liste_instructions • '}'

    ';'  shift, and go to state 44
    '}'  shift, and go to state 181


State 169

    2 liste_instructions: liste_instructions • ';' instruction
    9 instruction: "for" ID "in" liste_operandes "do" liste_instructions • "done"

    ';'     shift, and go to state 44
    "done"  shift, and go to state 182


State 170

    2 liste_instructions: • liste_instructions ';' instruction
    3                   | • instruction
    4 instruction: • ID '=' concatenation
    5            | • ID '[' operande_entier ']' '=' concatenation
    6            | • "declare" ID '[' ENTIER ']'
    7            | • IF test_bloc "then" liste_instructions else_part "fi"
    8            | • "for" ID "do" liste_instructions "done"
    9            | • "for" ID "in" liste_operandes "do" liste_instructions "done"
   10            | • "while" test_bloc "do" liste_instructions "done"
   11            | • "until" test_bloc "do" liste_instructions "done"
   12            | • "case" operande "in" liste_cas "esac"
   13            | • "echo" liste_operandes
   14            | • "read" ID
   15            | • "read" ID '[' operande_entier ']'
   16            | • declaration_de_fonction
   17            | • appel_de_fonction
   18            | • "return"
   19            | • "return" operande_entier
   20            | • "exit"
   21            | • "exit" operande_entier
   25 liste_cas: liste_cas filtre ')' • liste_instructions ';' ';'
   85 declaration_de_fonction: • ID '(' ')' '{' decl_loc liste_instructions '}'
   88 appel_de_fonction: • ID liste_operandes
   89                  | • ID

    IF         shift, and go to state 1
    ID         shift, and go to state 2
    "declare"  shift, and go to state 3
    "for"      shift, and go to state 4
    "while"    shift, and go to state 5
    "until"    shift, and go to state 6
    "case"     shift, and go to state 7
    "echo"     shift, and go to state 8
    "read"     shift, and go to state 9
    "return"   shift, and go to state 10
    "exit"     shift, and go to state 11

    liste_instructions       go to state 183
    instruction              go to state 14
    declaration_de_fonction  go to state 15
    appel_de_fonction        go to state 16


State 171

    2 liste_instructions: liste_instructions • ';' instruction
   26 liste_cas: filtre ')' liste_instructions • ';' ';'

    ';'  shift, and go to state 184


State 172

   29 filtre: filtre '|' MOT •

    $default  reduce using rule 29 (filtre)


State 173

   30 filtre: filtre '|' CHAINE •

    $default  reduce using rule 30 (filtre)


State 174

   72 operande_entier: '$' '{' ID '[' operande_entier • ']' '}'

    ']'  shift, and go to state 185


State 175

   71 operande_entier: • '$' '{' ID '}'
   72                | • '$' '{' ID '[' operande_entier ']' '}'
   73                | • '$' ENTIER
   74                | • plus_ou_moins '$' '{' ID '}'
   75                | • plus_ou_moins '$' '{' ID '[' operande_entier ']' '}'
   75                | plus_ou_moins '$' '{' ID '[' • operande_entier ']' '}'
   76                | • plus_ou_moins '$' ENTIER
   77                | • ENTIER
   78                | • plus_ou_moins ENTIER
   79                | • '(' somme_entiere ')'
   80 plus_ou_moins: • '+'
   81              | • '-'

    ENTIER  shift, and go to state 35
    '+'     shift, and go to state 36
    '-'     shift, and go to state 37
    '$'     shift, and go to state 38
    '('     shift, and go to state 39

    operande_entier  go to state 186
    plus_ou_moins    go to state 41


State 176

   74 operande_entier: plus_ou_moins '$' '{' ID '}' •

    $default  reduce using rule 74 (operande_entier)


State 177

    2 liste_instructions: • liste_instructions ';' instruction
    3                   | • instruction
    4 instruction: • ID '=' concatenation
    5            | • ID '[' operande_entier ']' '=' concatenation
    6            | • "declare" ID '[' ENTIER ']'
    7            | • IF test_bloc "then" liste_instructions else_part "fi"
    8            | • "for" ID "do" liste_instructions "done"
    9            | • "for" ID "in" liste_operandes "do" liste_instructions "done"
   10            | • "while" test_bloc "do" liste_instructions "done"
   11            | • "until" test_bloc "do" liste_instructions "done"
   12            | • "case" operande "in" liste_cas "esac"
   13            | • "echo" liste_operandes
   14            | • "read" ID
   15            | • "read" ID '[' operande_entier ']'
   16            | • declaration_de_fonction
   17            | • appel_de_fonction
   18            | • "return"
   19            | • "return" operande_entier
   20            | • "exit"
   21            | • "exit" operande_entier
   22 else_part: "elif" test_bloc "then" • liste_instructions else_part
   85 declaration_de_fonction: • ID '(' ')' '{' decl_loc liste_instructions '}'
   88 appel_de_fonction: • ID liste_operandes
   89                  | • ID

    IF         shift, and go to state 1
    ID         shift, and go to state 2
    "declare"  shift, and go to state 3
    "for"      shift, and go to state 4
    "while"    shift, and go to state 5
    "until"    shift, and go to state 6
    "case"     shift, and go to state 7
    "echo"     shift, and go to state 8
    "read"     shift, and go to state 9
    "return"   shift, and go to state 10
    "exit"     shift, and go to state 11

    liste_instructions       go to state 187
    instruction              go to state 14
    declaration_de_fonction  go to state 15
    appel_de_fonction        go to state 16


State 178

   34 liste_operandes: '$' '{' ID '[' '*' ']' • '}'

    '}'  shift, and go to state 188


State 179

   51 operande: '$' '{' ID '[' operande_entier ']' • '}'

    '}'  shift, and go to state 189


State 180

   86 decl_loc: decl_loc "local" ID • '=' concatenation ';'

    '='  shift, and go to state 190


State 181

   85 declaration_de_fonction: ID '(' ')' '{' decl_loc liste_instructions '}' •

    $default  reduce using rule 85 (declaration_de_fonction)


State 182

    9 instruction: "for" ID "in" liste_operandes "do" liste_instructions "done" •

    $default  reduce using rule 9 (instruction)


State 183

    2 liste_instructions: liste_instructions • ';' instruction
   25 liste_cas: liste_cas filtre ')' liste_instructions • ';' ';'

    ';'  shift, and go to state 191


State 184

    2 liste_instructions: liste_instructions ';' • instruction
    4 instruction: • ID '=' concatenation
    5            | • ID '[' operande_entier ']' '=' concatenation
    6            | • "declare" ID '[' ENTIER ']'
    7            | • IF test_bloc "then" liste_instructions else_part "fi"
    8            | • "for" ID "do" liste_instructions "done"
    9            | • "for" ID "in" liste_operandes "do" liste_instructions "done"
   10            | • "while" test_bloc "do" liste_instructions "done"
   11            | • "until" test_bloc "do" liste_instructions "done"
   12            | • "case" operande "in" liste_cas "esac"
   13            | • "echo" liste_operandes
   14            | • "read" ID
   15            | • "read" ID '[' operande_entier ']'
   16            | • declaration_de_fonction
   17            | • appel_de_fonction
   18            | • "return"
   19            | • "return" operande_entier
   20            | • "exit"
   21            | • "exit" operande_entier
   26 liste_cas: filtre ')' liste_instructions ';' • ';'
   85 declaration_de_fonction: • ID '(' ')' '{' decl_loc liste_instructions '}'
   88 appel_de_fonction: • ID liste_operandes
   89                  | • ID

    IF         shift, and go to state 1
    ID         shift, and go to state 2
    ';'        shift, and go to state 192
    "declare"  shift, and go to state 3
    "for"      shift, and go to state 4
    "while"    shift, and go to state 5
    "until"    shift, and go to state 6
    "case"     shift, and go to state 7
    "echo"     shift, and go to state 8
    "read"     shift, and go to state 9
    "return"   shift, and go to state 10
    "exit"     shift, and go to state 11

    instruction              go to state 82
    declaration_de_fonction  go to state 15
    appel_de_fonction        go to state 16


State 185

   72 operande_entier: '$' '{' ID '[' operande_entier ']' • '}'

    '}'  shift, and go to state 193


State 186

   75 operande_entier: plus_ou_moins '$' '{' ID '[' operande_entier • ']' '}'

    ']'  shift, and go to state 194


State 187

    2 liste_instructions: liste_instructions • ';' instruction
   22 else_part: • "elif" test_bloc "then" liste_instructions else_part
   22          | "elif" test_bloc "then" liste_instructions • else_part
   23          | • "else" liste_instructions
   24          | ε •  ["fi"]

    ';'     shift, and go to state 44
    "elif"  shift, and go to state 134
    "else"  shift, and go to state 135

    $default  reduce using rule 24 (else_part)

    else_part  go to state 195


State 188

   34 liste_operandes: '$' '{' ID '[' '*' ']' '}' •

    $default  reduce using rule 34 (liste_operandes)


State 189

   51 operande: '$' '{' ID '[' operande_entier ']' '}' •

    $default  reduce using rule 51 (operande)


State 190

   35 concatenation: • concatenation operande
   36              | • operande
   50 operande: • '$' '{' ID '}'
   51         | • '$' '{' ID '[' operande_entier ']' '}'
   52         | • MOT
   53         | • '$' ENTIER
   54         | • '$' '*'
   55         | • '$' '?'
   56         | • CHAINE
   57         | • '$' '(' "expr" somme_entiere ')'
   58         | • '$' '(' appel_de_fonction ')'
   86 decl_loc: decl_loc "local" ID '=' • concatenation ';'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    '$'     shift, and go to state 31

    concatenation  go to state 196
    operande       go to state 58


State 191

    2 liste_instructions: liste_instructions ';' • instruction
    4 instruction: • ID '=' concatenation
    5            | • ID '[' operande_entier ']' '=' concatenation
    6            | • "declare" ID '[' ENTIER ']'
    7            | • IF test_bloc "then" liste_instructions else_part "fi"
    8            | • "for" ID "do" liste_instructions "done"
    9            | • "for" ID "in" liste_operandes "do" liste_instructions "done"
   10            | • "while" test_bloc "do" liste_instructions "done"
   11            | • "until" test_bloc "do" liste_instructions "done"
   12            | • "case" operande "in" liste_cas "esac"
   13            | • "echo" liste_operandes
   14            | • "read" ID
   15            | • "read" ID '[' operande_entier ']'
   16            | • declaration_de_fonction
   17            | • appel_de_fonction
   18            | • "return"
   19            | • "return" operande_entier
   20            | • "exit"
   21            | • "exit" operande_entier
   25 liste_cas: liste_cas filtre ')' liste_instructions ';' • ';'
   85 declaration_de_fonction: • ID '(' ')' '{' decl_loc liste_instructions '}'
   88 appel_de_fonction: • ID liste_operandes
   89                  | • ID

    IF         shift, and go to state 1
    ID         shift, and go to state 2
    ';'        shift, and go to state 197
    "declare"  shift, and go to state 3
    "for"      shift, and go to state 4
    "while"    shift, and go to state 5
    "until"    shift, and go to state 6
    "case"     shift, and go to state 7
    "echo"     shift, and go to state 8
    "read"     shift, and go to state 9
    "return"   shift, and go to state 10
    "exit"     shift, and go to state 11

    instruction              go to state 82
    declaration_de_fonction  go to state 15
    appel_de_fonction        go to state 16


State 192

   26 liste_cas: filtre ')' liste_instructions ';' ';' •

    $default  reduce using rule 26 (liste_cas)


State 193

   72 operande_entier: '$' '{' ID '[' operande_entier ']' '}' •

    $default  reduce using rule 72 (operande_entier)


State 194

   75 operande_entier: plus_ou_moins '$' '{' ID '[' operande_entier ']' • '}'

    '}'  shift, and go to state 198


State 195

   22 else_part: "elif" test_bloc "then" liste_instructions else_part •

    $default  reduce using rule 22 (else_part)


State 196

   35 concatenation: concatenation • operande
   50 operande: • '$' '{' ID '}'
   51         | • '$' '{' ID '[' operande_entier ']' '}'
   52         | • MOT
   53         | • '$' ENTIER
   54         | • '$' '*'
   55         | • '$' '?'
   56         | • CHAINE
   57         | • '$' '(' "expr" somme_entiere ')'
   58         | • '$' '(' appel_de_fonction ')'
   86 decl_loc: decl_loc "local" ID '=' concatenation • ';'

    MOT     shift, and go to state 19
    CHAINE  shift, and go to state 20
    ';'     shift, and go to state 199
    '$'     shift, and go to state 31

    operande  go to state 88


State 197

   25 liste_cas: liste_cas filtre ')' liste_instructions ';' ';' •

    $default  reduce using rule 25 (liste_cas)


State 198

   75 operande_entier: plus_ou_moins '$' '{' ID '[' operande_entier ']' '}' •

    $default  reduce using rule 75 (operande_entier)


State 199

   86 decl_loc: decl_loc "local" ID '=' concatenation ';' •

    $default  reduce using rule 86 (decl_loc)
